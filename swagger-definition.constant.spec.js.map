{"version":3,"sources":["../../lib/swagger-express-ts-lib/src/swagger-definition.constant.spec.ts"],"names":[],"mappings":"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","file":"swagger-definition.constant.spec.js","sourcesContent":["import * as chai from 'chai';\r\nimport { SwaggerDefinitionConstant } from '.';\r\nconst expect = chai.expect;\r\n\r\ndescribe('SwaggerDefinitionConstant', () => {\r\n    describe('Produce', () => {\r\n        it('expect JSON', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.JSON).exist;\r\n        });\r\n        it('expect XML', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.XML).exist;\r\n        });\r\n        it('expect ZIP', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.ZIP).exist;\r\n        });\r\n        it('expect PDF', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.PDF).exist;\r\n        });\r\n        it('expect X_WWW_FORM_URLENCODED', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.X_WWW_FORM_URLENCODED)\r\n                .exist;\r\n        });\r\n        it('expect FORM_DATA', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.FORM_DATA).exist;\r\n        });\r\n        it('expect TEXT_PLAIN', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.TEXT_PLAIN).exist;\r\n        });\r\n        it('expect TEXT_HTML', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.TEXT_HTML).exist;\r\n        });\r\n        it('expect PNG', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.PNG).exist;\r\n        });\r\n        it('expect GIF', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.GIF).exist;\r\n        });\r\n        it('expect JPEG', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.JPEG).exist;\r\n        });\r\n    });\r\n\r\n    describe('Scheme', () => {\r\n        it('expect HTTP', () => {\r\n            expect(SwaggerDefinitionConstant.Scheme.HTTP).exist;\r\n        });\r\n        it('expect HTTPS', () => {\r\n            expect(SwaggerDefinitionConstant.Scheme.HTTPS).exist;\r\n        });\r\n    });\r\n\r\n    describe('Model', () => {\r\n        describe('Type', () => {\r\n            it('expect OBJECT', () => {\r\n                expect(SwaggerDefinitionConstant.Model.Type.OBJECT).exist;\r\n            });\r\n            it('expect ARRAY', () => {\r\n                expect(SwaggerDefinitionConstant.Model.Type.ARRAY).exist;\r\n            });\r\n        });\r\n        describe('Property', () => {\r\n            describe('Type', () => {\r\n                expectType(SwaggerDefinitionConstant.Model.Property.Type);\r\n            });\r\n            describe('Format', () => {\r\n                it('expect INT_64', () => {\r\n                    expect(\r\n                        SwaggerDefinitionConstant.Model.Property.Format.INT_64\r\n                    ).exist;\r\n                });\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('Parameter', () => {\r\n        describe('Type', () => {\r\n            expectType(SwaggerDefinitionConstant.Parameter.Type);\r\n        });\r\n        describe('In', () => {\r\n            it('expect HEADER', () => {\r\n                expect(SwaggerDefinitionConstant.Parameter.In.HEADER).exist;\r\n            });\r\n            it('expect PATH', () => {\r\n                expect(SwaggerDefinitionConstant.Parameter.In.PATH).exist;\r\n            });\r\n            it('expect QUERY', () => {\r\n                expect(SwaggerDefinitionConstant.Parameter.In.QUERY).exist;\r\n            });\r\n            it('expect BODY', () => {\r\n                expect(SwaggerDefinitionConstant.Parameter.In.BODY).exist;\r\n            });\r\n            it('expect FORM_DATA', () => {\r\n                expect(SwaggerDefinitionConstant.Parameter.In.FORM_DATA).exist;\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('Response', () => {\r\n        describe('Type', () => {\r\n            expectType(SwaggerDefinitionConstant.Response.Type);\r\n        });\r\n    });\r\n\r\n    describe('Security', () => {\r\n        describe('Type', () => {\r\n            it('expect BASIC_AUTHENTICATION', () => {\r\n                expect(\r\n                    SwaggerDefinitionConstant.Security.Type.BASIC_AUTHENTICATION\r\n                ).exist;\r\n            });\r\n            it('expect API_KEY', () => {\r\n                expect(SwaggerDefinitionConstant.Security.Type.API_KEY).exist;\r\n            });\r\n        });\r\n        describe('In', () => {\r\n            it('expect HEADER', () => {\r\n                expect(SwaggerDefinitionConstant.Security.In.HEADER).exist;\r\n            });\r\n            it('expect QUERY', () => {\r\n                expect(SwaggerDefinitionConstant.Security.In.QUERY).exist;\r\n            });\r\n        });\r\n    });\r\n});\r\n\r\nfunction expectType(Type: any) {\r\n    it('expect STRING', () => {\r\n        expect(Type.STRING).exist;\r\n    });\r\n    it('expect NUMBER', () => {\r\n        expect(Type.NUMBER).exist;\r\n    });\r\n    it('expect INTEGER', () => {\r\n        expect(Type.INTEGER).exist;\r\n    });\r\n    it('expect BOOLEAN', () => {\r\n        expect(Type.BOOLEAN).exist;\r\n    });\r\n    it('expect ARRAY', () => {\r\n        expect(Type.ARRAY).exist;\r\n    });\r\n    it('expect OBJECT', () => {\r\n        expect(Type.OBJECT).exist;\r\n    });\r\n}\r\n"]}