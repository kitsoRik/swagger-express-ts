{"version":3,"sources":["../../lib/swagger-express-ts-lib/src/express.configurator.ts"],"names":[],"mappings":";;;AAAA,mCAAkE;AAClE,qDAAmD;AACnD,+BAAiC;AACjC,qDAAmE;AAgBnE,SAAgB,OAAO,CAAC,OAAgC;IACpD,IAAI,IAAI,GAAW,wBAAwB,CAAC;IAC5C,IAAI,OAAO,EAAE;QACT,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,yBAAyB,CAAC,CAAC;QACzD,IAAI,OAAO,CAAC,IAAI,EAAE;YACd,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;SACvB;QACD,IAAI,OAAO,CAAC,UAAU,EAAE;YACpB,uBAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;SAC7B;KACJ;IACD,IAAM,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;IACjC,OAAO,MAAM,CAAC;AAClB,CAAC;AAbD,0BAaC;AAED,SAAS,WAAW,CAAC,IAAY;IAC7B,IAAM,MAAM,GAAW,gBAAM,EAAE,CAAC;IAChC,MAAM,CAAC,GAAG,CACN,IAAI,EACJ,UAAC,OAAgB,EAAE,QAAkB,EAAE,IAAkB;QACrD,IAAM,IAAI,GAAa,gCAAc,CAAC,WAAW,EAAE,CAAC,OAAO,EAAE,CAAC;QAC9D,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC,CACJ,CAAC;IACF,OAAO,MAAM,CAAC;AAClB,CAAC","file":"express.configurator.js","sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\r\nimport { SwaggerService } from './swagger.service';\r\nimport * as assert from 'assert';\r\nimport { build, ISwaggerBuildDefinition } from './swagger.builder';\r\nimport { ISwagger } from './i-swagger';\r\n\r\nexport interface ISwaggerExpressOptions {\r\n    /**\r\n     * Path of resource.\r\n     * Default is \"/api-docs/swagger.json\".\r\n     */\r\n    path?: string;\r\n\r\n    /**\r\n     * Swagger Definition.\r\n     */\r\n    definition?: ISwaggerBuildDefinition;\r\n}\r\n\r\nexport function express(options?: ISwaggerExpressOptions): Router {\r\n    let path: string = '/api-docs/swagger.json';\r\n    if (options) {\r\n        assert.ok(options.definition, 'Definition is required.');\r\n        if (options.path) {\r\n            path = options.path;\r\n        }\r\n        if (options.definition) {\r\n            build(options.definition);\r\n        }\r\n    }\r\n    const router = buildRouter(path);\r\n    return router;\r\n}\r\n\r\nfunction buildRouter(path: string): Router {\r\n    const router: Router = Router();\r\n    router.get(\r\n        path,\r\n        (request: Request, response: Response, next: NextFunction) => {\r\n            const data: ISwagger = SwaggerService.getInstance().getData();\r\n            response.json(data);\r\n        }\r\n    );\r\n    return router;\r\n}\r\n"]}