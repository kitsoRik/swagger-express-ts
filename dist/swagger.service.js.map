{"version":3,"sources":["../../lib/swagger-express-ts-lib/src/swagger.service.ts"],"names":[],"mappings":"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","file":"swagger.service.js","sourcesContent":["import * as assert from 'assert';\r\nimport * as _ from 'lodash';\r\nimport { IApiModelArgs } from '.';\r\nimport { IApiModelPropertyArgs } from './api-model-property.decorator';\r\nimport { IApiOperationGetArgs } from './api-operation-get.decorator';\r\nimport { IApiOperationPostArgs } from './api-operation-post.decorator';\r\nimport { IApiPathArgs } from './api-path.decorator';\r\nimport {\r\n    IApiBodyOperationArgsBaseParameter,\r\n    IApiOperationArgsBase,\r\n    IApiOperationArgsBaseParameter,\r\n    IApiOperationArgsBaseResponse,\r\n} from './i-api-operation-args.base';\r\nimport {\r\n    ISwagger,\r\n    ISwaggerDefinition,\r\n    ISwaggerDefinitionProperty,\r\n    ISwaggerDefinitionPropertyItems,\r\n    ISwaggerExternalDocs,\r\n    ISwaggerInfo,\r\n    ISwaggerOperation,\r\n    ISwaggerOperationParameter,\r\n    ISwaggerOperationResponse,\r\n    ISwaggerOperationSchema,\r\n    ISwaggerOperationSchemaItems,\r\n    ISwaggerPath,\r\n    ISwaggerPropertySchemaOperation,\r\n    ISwaggerTag,\r\n} from './i-swagger';\r\nimport { SwaggerDefinitionConstant } from './swagger-definition.constant';\r\nimport {\r\n    ISwaggerBuildDefinitionModel,\r\n    ISwaggerBuildDefinitionModelProperty,\r\n    ISwaggerSecurityDefinition,\r\n} from './swagger.builder';\r\n\r\ninterface IPath {\r\n    path: string;\r\n    get?: ISwaggerOperation;\r\n    post?: ISwaggerOperation;\r\n    put?: ISwaggerOperation;\r\n    patch?: ISwaggerOperation;\r\n    delete?: ISwaggerOperation;\r\n}\r\n\r\ninterface IController {\r\n    path?: string;\r\n    paths?: { [key: string]: IPath };\r\n    name?: string;\r\n    description?: string;\r\n    security?: { [key: string]: any[] };\r\n    deprecated?: boolean;\r\n}\r\n\r\nexport class SwaggerService {\r\n    public static getInstance(): SwaggerService {\r\n        if (!SwaggerService.instance) {\r\n            const newSwaggerService: SwaggerService = new SwaggerService();\r\n            newSwaggerService.initData();\r\n            SwaggerService.instance = newSwaggerService;\r\n        }\r\n        return SwaggerService.instance;\r\n    }\r\n    private static instance: SwaggerService;\r\n    private controllerMap: { [key: string]: IController } = {};\r\n    private data: ISwagger;\r\n    private modelsMap: { [key: string]: ISwaggerBuildDefinitionModel } = {};\r\n    private globalResponses: { [key: string]: IApiOperationArgsBaseResponse };\r\n\r\n    public resetData(): void {\r\n        this.controllerMap = {};\r\n        this.initData();\r\n    }\r\n\r\n    public getData(): ISwagger {\r\n        return _.cloneDeep(this.data);\r\n    }\r\n\r\n    public setBasePath(basePath: string): void {\r\n        this.data.basePath = basePath;\r\n    }\r\n\r\n    public setOpenapi(openapi: string): void {\r\n        this.data.openapi = openapi;\r\n    }\r\n\r\n    public setInfo(info: ISwaggerInfo): void {\r\n        this.data.info = info;\r\n    }\r\n\r\n    public setSchemes(schemes: string[]): void {\r\n        this.data.schemes = schemes;\r\n    }\r\n\r\n    public setProduces(produces: string[]): void {\r\n        this.data.produces = produces;\r\n    }\r\n\r\n    public setConsumes(consumes: string[]): void {\r\n        this.data.consumes = consumes;\r\n    }\r\n\r\n    public setHost(host: string): void {\r\n        this.data.host = host;\r\n    }\r\n\r\n    public setDefinitions(models: {\r\n        [key: string]: ISwaggerBuildDefinitionModel;\r\n    }): void {\r\n        const definitions: { [key: string]: ISwaggerDefinition } = {};\r\n        for (const modelIndex in models) {\r\n            const model: ISwaggerBuildDefinitionModel = models[modelIndex];\r\n            const newDefinition: ISwaggerDefinition = {\r\n                type: SwaggerDefinitionConstant.Model.Type.OBJECT,\r\n                properties: {},\r\n                required: [],\r\n            };\r\n            if (model.description) {\r\n                newDefinition.description = model.description;\r\n            }\r\n            for (const propertyIndex in model.properties) {\r\n                const property: ISwaggerBuildDefinitionModelProperty =\r\n                    model.properties[propertyIndex];\r\n                const newProperty: ISwaggerDefinitionProperty = {\r\n                    type: property.type,\r\n                };\r\n                newProperty.format = property.format;\r\n                newProperty.description = property.description;\r\n                newProperty.enum = property.enum;\r\n                newProperty.example = property.example;\r\n                if (property.itemType) {\r\n                    newProperty.items = {\r\n                        type: property.itemType,\r\n                    } as ISwaggerDefinitionPropertyItems;\r\n                }\r\n                if (property.model) {\r\n                    if (\r\n                        _.isEqual(\r\n                            SwaggerDefinitionConstant.Model.Property.Type.ARRAY,\r\n                            property.type\r\n                        )\r\n                    ) {\r\n                        newProperty.items = {\r\n                            $ref: this.buildRef(property.model),\r\n                        } as ISwaggerDefinitionPropertyItems;\r\n                    } else {\r\n                        newProperty.$ref = this.buildRef(property.model);\r\n                    }\r\n                }\r\n                if (property.required) {\r\n                    newDefinition.required.push(propertyIndex);\r\n                }\r\n                newDefinition.properties[propertyIndex] = newProperty;\r\n            }\r\n            definitions[modelIndex] = newDefinition;\r\n        }\r\n        this.data.definitions = _.mergeWith(this.data.definitions, definitions);\r\n    }\r\n\r\n    public setExternalDocs(externalDocs: ISwaggerExternalDocs): void {\r\n        this.data.externalDocs = externalDocs;\r\n    }\r\n\r\n    public setGlobalResponses(globalResponses: {\r\n        [key: string]: IApiOperationArgsBaseResponse;\r\n    }): void {\r\n        this.globalResponses = this.buildOperationResponses(globalResponses);\r\n    }\r\n\r\n    public addPath(args: IApiPathArgs, target: any): void {\r\n        let currentController: IController = {\r\n            path: args.path,\r\n            name: args.name,\r\n            paths: {},\r\n        };\r\n        for (const controllerIndex in this.controllerMap) {\r\n            const controller: IController = this.controllerMap[controllerIndex];\r\n            if (controllerIndex === target.name) {\r\n                currentController = controller;\r\n                currentController.path = args.path;\r\n                currentController.name = args.name;\r\n                currentController.description = args.description;\r\n                currentController.security = args.security;\r\n                currentController.deprecated = args.deprecated;\r\n            }\r\n        }\r\n        this.controllerMap[target.name] = _.mergeWith(\r\n            this.controllerMap[target.name],\r\n            currentController\r\n        );\r\n    }\r\n\r\n    public addOperationGet(\r\n        args: IApiOperationGetArgs,\r\n        target: any,\r\n        propertyKey: string | symbol\r\n    ): void {\r\n        assert.ok(args, 'Args are required.');\r\n        assert.ok(args.responses, 'Responses are required.');\r\n        if (args.parameters) {\r\n            assert.ok(!args.parameters.body, 'Parameter body is not required.');\r\n        }\r\n        this.addOperation('get', args, target, propertyKey);\r\n    }\r\n\r\n    public addOperationPost(\r\n        args: IApiOperationPostArgs,\r\n        target: any,\r\n        propertyKey: string | symbol\r\n    ): void {\r\n        assert.ok(args, 'Args are required.');\r\n        assert.ok(args.parameters, 'Parameters are required.');\r\n        assert.ok(args.responses, 'Responses are required.');\r\n        this.addOperation('post', args, target, propertyKey);\r\n    }\r\n\r\n    public addOperationPut(\r\n        args: IApiOperationPostArgs,\r\n        target: any,\r\n        propertyKey: string | symbol\r\n    ): void {\r\n        assert.ok(args, 'Args are required.');\r\n        assert.ok(args.parameters, 'Parameters are required.');\r\n        assert.ok(args.responses, 'Responses are required.');\r\n        this.addOperation('put', args, target, propertyKey);\r\n    }\r\n\r\n    public addOperationPatch(\r\n        args: IApiOperationPostArgs,\r\n        target: any,\r\n        propertyKey: string | symbol\r\n    ): void {\r\n        assert.ok(args, 'Args are required.');\r\n        assert.ok(args.parameters, 'Parameters are required.');\r\n        assert.ok(args.responses, 'Responses are required.');\r\n        this.addOperation('patch', args, target, propertyKey);\r\n    }\r\n\r\n    public addOperationDelete(\r\n        args: IApiOperationPostArgs,\r\n        target: any,\r\n        propertyKey: string | symbol\r\n    ): void {\r\n        assert.ok(args, 'Args are required.');\r\n        assert.ok(args.parameters, 'Parameters are required.');\r\n        assert.ok(!args.parameters.body, 'Parameter body is not required.');\r\n        assert.ok(args.responses, 'Responses are required.');\r\n        this.addOperation('delete', args, target, propertyKey);\r\n    }\r\n\r\n    public addSecurityDefinitions(securityDefinitions: {\r\n        [key: string]: ISwaggerSecurityDefinition;\r\n    }): void {\r\n        this.data.securityDefinitions = securityDefinitions;\r\n    }\r\n\r\n    public buildSwagger(): void {\r\n        const data: ISwagger = _.cloneDeep(this.data);\r\n        for (const controllerIndex in this.controllerMap) {\r\n            const controller: IController = this.controllerMap[controllerIndex];\r\n            if (_.toArray(controller.paths).length > 0) {\r\n                for (const pathIndex in controller.paths) {\r\n                    const path: IPath = controller.paths[pathIndex];\r\n                    const swaggerPath: ISwaggerPath = {};\r\n                    if (path.get) {\r\n                        swaggerPath.get = this.buildSwaggerOperation(\r\n                            path.get,\r\n                            controller\r\n                        );\r\n                    }\r\n                    if (path.post) {\r\n                        swaggerPath.post = this.buildSwaggerOperation(\r\n                            path.post,\r\n                            controller\r\n                        );\r\n                    }\r\n                    if (path.put) {\r\n                        swaggerPath.put = this.buildSwaggerOperation(\r\n                            path.put,\r\n                            controller\r\n                        );\r\n                    }\r\n                    if (path.patch) {\r\n                        swaggerPath.patch = this.buildSwaggerOperation(\r\n                            path.patch,\r\n                            controller\r\n                        );\r\n                    }\r\n                    if (path.delete) {\r\n                        swaggerPath.delete = this.buildSwaggerOperation(\r\n                            path.delete,\r\n                            controller\r\n                        );\r\n                    }\r\n                    if (path.path && path.path.length > 0) {\r\n                        data.paths[\r\n                            controller.path.concat(path.path)\r\n                        ] = swaggerPath;\r\n                    } else {\r\n                        data.paths[controller.path] = swaggerPath;\r\n                    }\r\n                }\r\n            } else {\r\n                const swaggerPath: ISwaggerPath = {};\r\n                data.paths[controller.path] = swaggerPath;\r\n            }\r\n\r\n            if (!_.find(data.tags, (tag: ISwaggerTag) => tag.name === _.upperFirst(controller.name))) {\r\n              data.tags.push({\r\n                  name: _.upperFirst(controller.name),\r\n                  description: controller.description,\r\n              } as ISwaggerTag);\r\n            }\r\n        }\r\n        this.data = data;\r\n    }\r\n\r\n    public addApiModelProperty(\r\n        args: IApiModelPropertyArgs,\r\n        target: any,\r\n        propertyKey: string | symbol,\r\n        propertyType: string\r\n    ) {\r\n        const definitionKey = target.constructor.name;\r\n        let swaggerBuildDefinitionModel: ISwaggerBuildDefinitionModel = this\r\n            .modelsMap[definitionKey];\r\n        if (!swaggerBuildDefinitionModel) {\r\n            swaggerBuildDefinitionModel = {\r\n                properties: {},\r\n            };\r\n            this.modelsMap[definitionKey] = swaggerBuildDefinitionModel;\r\n        }\r\n\r\n        const swaggerBuildDefinitionModelProperty: ISwaggerBuildDefinitionModelProperty = {\r\n            type: _.lowerCase(propertyType),\r\n        };\r\n        if (args) {\r\n            swaggerBuildDefinitionModelProperty.required = args.required;\r\n            swaggerBuildDefinitionModelProperty.description = args.description;\r\n            swaggerBuildDefinitionModelProperty.enum = args.enum;\r\n            swaggerBuildDefinitionModelProperty.itemType = args.itemType;\r\n            swaggerBuildDefinitionModelProperty.example = args.example;\r\n            swaggerBuildDefinitionModelProperty.format = args.format;\r\n            if (args.model) {\r\n                swaggerBuildDefinitionModelProperty.model = args.model;\r\n                if (!_.isEqual('Array', propertyType)) {\r\n                    swaggerBuildDefinitionModelProperty.type = undefined;\r\n                }\r\n            }\r\n            if (args.type) {\r\n                swaggerBuildDefinitionModelProperty.type = args.type;\r\n            }\r\n        }\r\n        swaggerBuildDefinitionModel.properties[\r\n            propertyKey.toString()\r\n        ] = swaggerBuildDefinitionModelProperty;\r\n        this.setDefinitions(this.modelsMap);\r\n    }\r\n\r\n    public addApiModel(args: IApiModelArgs, target: any): any {\r\n        const definitionKey = target.name;\r\n        let swaggerBuildDefinitionModel: ISwaggerBuildDefinitionModel = this\r\n            .modelsMap[definitionKey];\r\n        if (!swaggerBuildDefinitionModel) {\r\n            swaggerBuildDefinitionModel = {\r\n                properties: {},\r\n            };\r\n            this.modelsMap[definitionKey] = swaggerBuildDefinitionModel;\r\n        }\r\n        if (args) {\r\n            swaggerBuildDefinitionModel.description = args.description;\r\n            if (args.name) {\r\n                const name: string = _.upperFirst(args.name);\r\n                this.modelsMap[name] = _.cloneDeep(\r\n                    this.modelsMap[definitionKey]\r\n                );\r\n                if (!_.isEqual(name, definitionKey)) {\r\n                    delete this.modelsMap[definitionKey];\r\n                    delete this.data.definitions[definitionKey];\r\n                }\r\n            }\r\n        }\r\n        this.setDefinitions(this.modelsMap);\r\n    }\r\n\r\n    private initData(): void {\r\n        this.data = {\r\n            basePath: '/',\r\n            info: {\r\n                title: '',\r\n                version: '',\r\n            } as ISwaggerInfo,\r\n            paths: {},\r\n            tags: [],\r\n            schemes: [SwaggerDefinitionConstant.Scheme.HTTP],\r\n            produces: [SwaggerDefinitionConstant.Produce.JSON],\r\n            consumes: [SwaggerDefinitionConstant.Consume.JSON],\r\n            definitions: {},\r\n            swagger: '2.0',\r\n        };\r\n    }\r\n\r\n    private addOperation(\r\n        operation: string,\r\n        args: IApiOperationArgsBase,\r\n        target: any,\r\n        propertyKey: string | symbol\r\n    ): void {\r\n        let currentController: IController = {\r\n            paths: {},\r\n        };\r\n        for (const index in this.controllerMap) {\r\n            const controller = this.controllerMap[index];\r\n            if (index === target.constructor.name) {\r\n                currentController = controller;\r\n            }\r\n        }\r\n\r\n        let currentPath: IPath;\r\n        if (args.path && args.path.length > 0) {\r\n            if (!currentController.paths[args.path]) {\r\n                currentController.paths[args.path] = {} as IPath;\r\n            }\r\n            currentPath = currentController.paths[args.path];\r\n            currentPath.path = args.path;\r\n        } else {\r\n            if (!currentController.paths['/']) {\r\n                currentController.paths['/'] = {} as IPath;\r\n            }\r\n            currentPath = currentController.paths['/'];\r\n        }\r\n\r\n        if ('get' === operation) {\r\n            currentPath.get = this.buildOperation(args, target, propertyKey);\r\n        }\r\n\r\n        if ('post' === operation) {\r\n            currentPath.post = this.buildOperation(args, target, propertyKey);\r\n        }\r\n\r\n        if ('put' === operation) {\r\n            currentPath.put = this.buildOperation(args, target, propertyKey);\r\n        }\r\n\r\n        if ('patch' === operation) {\r\n            currentPath.patch = this.buildOperation(args, target, propertyKey);\r\n        }\r\n\r\n        if ('delete' === operation) {\r\n            currentPath.delete = this.buildOperation(args, target, propertyKey);\r\n        }\r\n\r\n        this.controllerMap[target.constructor.name] = currentController;\r\n    }\r\n\r\n    private buildOperation(\r\n        args: IApiOperationArgsBase,\r\n        target: any,\r\n        propertyKey: string | symbol\r\n    ): ISwaggerOperation {\r\n        const operation: ISwaggerOperation = {\r\n            operationId: propertyKey,\r\n            tags: [],\r\n        };\r\n        if (args.description) {\r\n            operation.description = args.description;\r\n        }\r\n        if (args.summary) {\r\n            operation.summary = args.summary;\r\n        }\r\n        if (args.produces && args.produces.length > 0) {\r\n            operation.produces = args.produces;\r\n        }\r\n\r\n        if (args.consumes && args.consumes.length > 0) {\r\n            operation.consumes = args.consumes;\r\n        }\r\n\r\n        if (args.tags && args.tags.length > 0) {\r\n            operation.tags = args.tags;\r\n        }\r\n\r\n        if (args.deprecated) {\r\n            operation.deprecated = args.deprecated;\r\n        }\r\n\r\n        if (args.parameters) {\r\n            operation.parameters = [];\r\n            if (args.parameters.header) {\r\n                operation.parameters = _.concat(\r\n                    operation.parameters,\r\n                    this.buildParameters(\r\n                        SwaggerDefinitionConstant.Parameter.In.HEADER,\r\n                        args.parameters.header\r\n                    )\r\n                );\r\n            }\r\n            if (args.parameters.path) {\r\n                operation.parameters = _.concat(\r\n                    operation.parameters,\r\n                    this.buildParameters(\r\n                        SwaggerDefinitionConstant.Parameter.In.PATH,\r\n                        args.parameters.path\r\n                    )\r\n                );\r\n            }\r\n            if (args.parameters.query) {\r\n                operation.parameters = _.concat(\r\n                    operation.parameters,\r\n                    this.buildParameters(\r\n                        SwaggerDefinitionConstant.Parameter.In.QUERY,\r\n                        args.parameters.query\r\n                    )\r\n                );\r\n            }\r\n            if (args.parameters.body) {\r\n                operation.parameters = _.concat(\r\n                    operation.parameters,\r\n                    this.buildBodyOperationParameter(args.parameters.body)\r\n                );\r\n            }\r\n            if (args.parameters.formData) {\r\n                operation.parameters = _.concat(\r\n                    operation.parameters,\r\n                    this.buildParameters(\r\n                        SwaggerDefinitionConstant.Parameter.In.FORM_DATA,\r\n                        args.parameters.formData\r\n                    )\r\n                );\r\n            }\r\n        }\r\n\r\n        if (args.responses) {\r\n            operation.responses = this.buildOperationResponses(args.responses);\r\n        }\r\n\r\n        if (args.security) {\r\n            operation.security = this.buildOperationSecurity(args.security);\r\n        }\r\n\r\n        return operation;\r\n    }\r\n\r\n    private buildOperationResponses(responses: {\r\n        [key: string]: IApiOperationArgsBaseResponse;\r\n    }): {\r\n        [key: string]: ISwaggerOperationResponse;\r\n    } {\r\n        const swaggerOperationResponses: {\r\n            [key: string]: ISwaggerOperationResponse;\r\n        } = {};\r\n        for (const responseIndex in responses) {\r\n            const response: IApiOperationArgsBaseResponse =\r\n                responses[responseIndex];\r\n            const newSwaggerOperationResponse: ISwaggerOperationResponse = {};\r\n            if (response.description) {\r\n                newSwaggerOperationResponse.description = response.description;\r\n            } else {\r\n                switch (responseIndex) {\r\n                    case '200':\r\n                        newSwaggerOperationResponse.description = 'Success';\r\n                        break;\r\n                    case '201':\r\n                        newSwaggerOperationResponse.description = 'Created';\r\n                        break;\r\n                    case '202':\r\n                        newSwaggerOperationResponse.description = 'Accepted';\r\n                        break;\r\n                    case '203':\r\n                        newSwaggerOperationResponse.description =\r\n                            'Non-Authoritative Information';\r\n                        break;\r\n                    case '204':\r\n                        newSwaggerOperationResponse.description = 'No Content';\r\n                        break;\r\n                    case '205':\r\n                        newSwaggerOperationResponse.description =\r\n                            'Reset Content';\r\n                        break;\r\n                    case '206':\r\n                        newSwaggerOperationResponse.description =\r\n                            'Partial Content';\r\n                        break;\r\n                    case '400':\r\n                        newSwaggerOperationResponse.description =\r\n                            'Client error and Bad Request';\r\n                        break;\r\n                    case '401':\r\n                        newSwaggerOperationResponse.description =\r\n                            'Client error and Unauthorized';\r\n                        break;\r\n                    case '404':\r\n                        newSwaggerOperationResponse.description =\r\n                            'Client error and Not Found';\r\n                        break;\r\n                    case '406':\r\n                        newSwaggerOperationResponse.description =\r\n                            'Client error and Not Acceptable';\r\n                        break;\r\n                    case '500':\r\n                        newSwaggerOperationResponse.description =\r\n                            'Internal Server Error';\r\n                        break;\r\n                    case '501':\r\n                        newSwaggerOperationResponse.description =\r\n                            'Not Implemented';\r\n                        break;\r\n                    case '503':\r\n                        newSwaggerOperationResponse.description =\r\n                            'Service Unavailable';\r\n                        break;\r\n                    default:\r\n                        newSwaggerOperationResponse.description = null;\r\n                }\r\n            }\r\n            if (response.model) {\r\n                const ref = this.buildRef(response.model);\r\n                let newSwaggerOperationResponseSchema: ISwaggerOperationSchema = {\r\n                    $ref: ref,\r\n                };\r\n                if (\r\n                    _.isEqual(\r\n                        response.type,\r\n                        SwaggerDefinitionConstant.Response.Type.ARRAY\r\n                    )\r\n                ) {\r\n                    newSwaggerOperationResponseSchema = {\r\n                        items: {\r\n                            $ref: ref,\r\n                        } as ISwaggerOperationSchemaItems,\r\n                        type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                    };\r\n                }\r\n                newSwaggerOperationResponse.schema = newSwaggerOperationResponseSchema;\r\n            }\r\n            swaggerOperationResponses[\r\n                responseIndex\r\n            ] = newSwaggerOperationResponse;\r\n        }\r\n        return swaggerOperationResponses;\r\n    }\r\n\r\n    private buildBodyOperationParameter(\r\n        bodyOperationArgsBaseParameter: IApiBodyOperationArgsBaseParameter\r\n    ): ISwaggerOperationParameter[] {\r\n        const swaggerOperationParameterList: ISwaggerOperationParameter[] = [];\r\n        const swaggerOperationParameter = {} as ISwaggerOperationParameter;\r\n        swaggerOperationParameter.name = bodyOperationArgsBaseParameter.name\r\n            ? bodyOperationArgsBaseParameter.name\r\n            : 'body';\r\n        swaggerOperationParameter.in = 'body';\r\n        swaggerOperationParameter.type = bodyOperationArgsBaseParameter.type;\r\n        swaggerOperationParameter.description =\r\n            bodyOperationArgsBaseParameter.description;\r\n        swaggerOperationParameter.required =\r\n            bodyOperationArgsBaseParameter.required;\r\n        swaggerOperationParameter.format =\r\n            bodyOperationArgsBaseParameter.format;\r\n        swaggerOperationParameter.deprecated =\r\n            bodyOperationArgsBaseParameter.deprecated;\r\n        swaggerOperationParameter.allowEmptyValue =\r\n            bodyOperationArgsBaseParameter.allowEmptyValue;\r\n        swaggerOperationParameter.minimum =\r\n            bodyOperationArgsBaseParameter.minimum;\r\n        swaggerOperationParameter.maximum =\r\n            bodyOperationArgsBaseParameter.maximum;\r\n        swaggerOperationParameter.default =\r\n            bodyOperationArgsBaseParameter.default;\r\n        let schema = {} as ISwaggerOperationSchema;\r\n        if (bodyOperationArgsBaseParameter.properties) {\r\n            schema.type = 'object';\r\n            schema.required = [];\r\n            schema.properties = {} as {\r\n                [key: string]: ISwaggerPropertySchemaOperation;\r\n            };\r\n            for (const propetyIndex in bodyOperationArgsBaseParameter.properties) {\r\n                const propertyBodyOperationArgsBaseParameter =\r\n                    bodyOperationArgsBaseParameter.properties[propetyIndex];\r\n                const propertySchemaOperation = {} as ISwaggerPropertySchemaOperation;\r\n                propertySchemaOperation.type =\r\n                    propertyBodyOperationArgsBaseParameter.type;\r\n                schema.properties[propetyIndex] = propertySchemaOperation;\r\n                if (propertyBodyOperationArgsBaseParameter.required) {\r\n                    schema.required.push(propetyIndex);\r\n                }\r\n            }\r\n        }\r\n        if (bodyOperationArgsBaseParameter.model) {\r\n            const swaggerOperationSchema: ISwaggerOperationSchema = {\r\n                $ref: this.buildRef(bodyOperationArgsBaseParameter.model),\r\n            };\r\n\r\n            if (bodyOperationArgsBaseParameter.type !== 'array') {\r\n                schema = swaggerOperationSchema;\r\n            } else {\r\n                schema.type = bodyOperationArgsBaseParameter.type;\r\n                schema.items = {\r\n                    $ref: this.buildRef(bodyOperationArgsBaseParameter.model),\r\n                };\r\n            }\r\n        }\r\n        swaggerOperationParameter.schema = schema;\r\n        swaggerOperationParameterList.push(swaggerOperationParameter);\r\n        return swaggerOperationParameterList;\r\n    }\r\n\r\n    private buildOperationSecurity(argsSecurity: {\r\n        [key: string]: any[];\r\n    }): { [key: string]: any[] }[] {\r\n        const securityToReturn = [];\r\n        for (const securityIndex in argsSecurity) {\r\n            const security: any[] = argsSecurity[securityIndex];\r\n            const result: { [key: string]: any[] } = {};\r\n            result[securityIndex] = security;\r\n            securityToReturn.push(result);\r\n        }\r\n        return securityToReturn;\r\n    }\r\n\r\n    private buildParameters(\r\n        type: string,\r\n        parameters: { [key: string]: IApiOperationArgsBaseParameter }\r\n    ): ISwaggerOperationParameter[] {\r\n        const swaggerOperationParameter: ISwaggerOperationParameter[] = [];\r\n        for (const parameterIndex in parameters) {\r\n            const parameter: IApiOperationArgsBaseParameter =\r\n                parameters[parameterIndex];\r\n            const newSwaggerOperationParameter: ISwaggerOperationParameter = {\r\n                name: parameterIndex,\r\n                in: type,\r\n                type: parameter.type,\r\n                items: parameter.items\r\n            };\r\n            if (parameter.name) {\r\n                newSwaggerOperationParameter.name = parameter.name;\r\n            }\r\n            newSwaggerOperationParameter.description = parameter.description;\r\n            newSwaggerOperationParameter.required = parameter.required;\r\n            newSwaggerOperationParameter.format = parameter.format;\r\n            newSwaggerOperationParameter.deprecated = parameter.deprecated;\r\n            newSwaggerOperationParameter.allowEmptyValue =\r\n                parameter.allowEmptyValue;\r\n            newSwaggerOperationParameter.minimum = parameter.minimum;\r\n            newSwaggerOperationParameter.maximum = parameter.maximum;\r\n            newSwaggerOperationParameter.default = parameter.default;\r\n            swaggerOperationParameter.push(newSwaggerOperationParameter);\r\n        }\r\n        return swaggerOperationParameter;\r\n    }\r\n\r\n    private buildSwaggerOperation(\r\n        operation: ISwaggerOperation,\r\n        controller: IController\r\n    ): ISwaggerOperation {\r\n        if (_.isUndefined(operation.produces)) {\r\n            operation.produces = this.data.produces;\r\n        }\r\n        if (_.isUndefined(operation.consumes)) {\r\n            operation.consumes = this.data.consumes;\r\n        }\r\n        if (_.isUndefined(operation.security) && controller.security) {\r\n            operation.security = this.buildOperationSecurity(\r\n                controller.security\r\n            );\r\n        }\r\n        if (_.isUndefined(operation.deprecated) && controller.deprecated) {\r\n            operation.deprecated = controller.deprecated;\r\n        }\r\n        if (this.globalResponses) {\r\n            operation.responses = _.mergeWith(\r\n                _.cloneDeep(this.globalResponses),\r\n                operation.responses\r\n            );\r\n        }\r\n        if (operation.tags && operation.tags.length > 0) {\r\n            operation.tags.unshift(_.upperFirst(controller.name));\r\n        } else {\r\n            operation.tags = [_.upperFirst(controller.name)];\r\n        }\r\n        return operation;\r\n    }\r\n\r\n    private buildRef(definition: string): string {\r\n        return '#/definitions/'.concat(_.upperFirst(definition));\r\n    }\r\n}\r\n"]}