{"version":3,"sources":["../../lib/swagger-express-ts-lib/src/swagger.service.spec.ts"],"names":[],"mappings":"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","file":"swagger.service.spec.js","sourcesContent":["import { SwaggerService } from './swagger.service';\r\nimport * as chai from 'chai';\r\nimport {\r\n    ISwaggerExternalDocs,\r\n    ISwaggerInfo,\r\n    ISwaggerDefinition,\r\n    ISwaggerDefinitionProperty,\r\n    ISwaggerPath,\r\n} from './i-swagger';\r\nimport { IApiPathArgs } from './api-path.decorator';\r\nimport { IApiOperationGetArgs } from './api-operation-get.decorator';\r\nimport { IApiOperationPostArgs } from './api-operation-post.decorator';\r\nimport { IApiOperationPutArgs } from './api-operation-put.decorator';\r\nimport { IApiOperationPatchArgs } from './api-operation-patch.decorator';\r\nimport { IApiOperationDeleteArgs } from './api-operation-delete.decorator';\r\nimport { SwaggerDefinitionConstant } from './swagger-definition.constant';\r\nimport { ISwaggerBuildDefinitionModel } from './swagger.builder';\r\nconst expect = chai.expect;\r\n\r\ndescribe('SwaggerService', () => {\r\n    beforeEach(() => {\r\n        SwaggerService.getInstance().resetData();\r\n        console.log('reset');\r\n    });\r\n\r\n    describe('setBasePath', () => {\r\n        it('expect basePath default \"/\"', () => {\r\n            expect(SwaggerService.getInstance().getData().basePath).to.equal(\r\n                '/'\r\n            );\r\n        });\r\n\r\n        it('expect basePath exist when it setted', () => {\r\n            const basePath = '/basepath';\r\n\r\n            SwaggerService.getInstance().setBasePath(basePath);\r\n\r\n            expect(SwaggerService.getInstance().getData().basePath).to.equal(\r\n                basePath\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('setOpenapi', () => {\r\n        it('expect default openapi when it not setted', () => {\r\n            expect(SwaggerService.getInstance().getData().openapi).to.not.exist;\r\n        });\r\n\r\n        it('expect openapi exist when it setted', () => {\r\n            const openapi = 'openapi';\r\n\r\n            SwaggerService.getInstance().setOpenapi(openapi);\r\n\r\n            expect(SwaggerService.getInstance().getData().openapi).to.equal(\r\n                openapi\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('setInfo', () => {\r\n        it('expect default info', () => {\r\n            expect(SwaggerService.getInstance().getData().info.title).to.equal(\r\n                ''\r\n            );\r\n            expect(\r\n                SwaggerService.getInstance().getData().info.version\r\n            ).to.equal('');\r\n        });\r\n\r\n        it('expect info when it defined', () => {\r\n            const info: ISwaggerInfo = {\r\n                title: 'Title',\r\n                version: '1.0.1',\r\n            };\r\n\r\n            SwaggerService.getInstance().setInfo(info);\r\n\r\n            expect(SwaggerService.getInstance().getData().info.title).to.equal(\r\n                info.title\r\n            );\r\n            expect(\r\n                SwaggerService.getInstance().getData().info.version\r\n            ).to.equal(info.version);\r\n        });\r\n    });\r\n\r\n    describe('setSchemes', () => {\r\n        it('expect default schemes when it not defined', () => {\r\n            expect(SwaggerService.getInstance().getData().schemes)\r\n                .to.have.lengthOf(1)\r\n                .to.have.members([SwaggerDefinitionConstant.Scheme.HTTP]);\r\n        });\r\n\r\n        it('expect schemes when it defined', () => {\r\n            const schemes: string[] = [\r\n                SwaggerDefinitionConstant.Scheme.HTTP,\r\n                SwaggerDefinitionConstant.Scheme.HTTPS,\r\n            ];\r\n\r\n            SwaggerService.getInstance().setSchemes(schemes);\r\n\r\n            expect(\r\n                SwaggerService.getInstance().getData().schemes\r\n            ).to.deep.equal(schemes);\r\n        });\r\n    });\r\n\r\n    describe('setExternalDocs', () => {\r\n        it('expect default externalDocs when it not defined', () => {\r\n            expect(SwaggerService.getInstance().getData().externalDocs).to.not\r\n                .exist;\r\n        });\r\n\r\n        it('expect externalDocs when it defined', () => {\r\n            const externalDocs: ISwaggerExternalDocs = {\r\n                url: 'Mon url',\r\n            };\r\n\r\n            SwaggerService.getInstance().setExternalDocs(externalDocs);\r\n\r\n            expect(\r\n                SwaggerService.getInstance().getData().externalDocs.url\r\n            ).to.equal(externalDocs.url);\r\n        });\r\n    });\r\n\r\n    describe('setProduces', () => {\r\n        it('expect default produces when it not defined', () => {\r\n            expect(SwaggerService.getInstance().getData().produces)\r\n                .to.have.lengthOf(1)\r\n                .to.have.members([SwaggerDefinitionConstant.Produce.JSON]);\r\n        });\r\n\r\n        it('expect produces when it defined', () => {\r\n            const produces: string[] = [\r\n                SwaggerDefinitionConstant.Produce.JSON,\r\n                SwaggerDefinitionConstant.Produce.XML,\r\n            ];\r\n\r\n            SwaggerService.getInstance().setProduces(produces);\r\n\r\n            expect(\r\n                SwaggerService.getInstance().getData().produces\r\n            ).to.deep.equal(produces);\r\n        });\r\n    });\r\n\r\n    describe('setConsumes', () => {\r\n        it('expect default consumes when it not defined', () => {\r\n            expect(SwaggerService.getInstance().getData().consumes)\r\n                .to.have.lengthOf(1)\r\n                .to.have.members([SwaggerDefinitionConstant.Consume.JSON]);\r\n        });\r\n\r\n        it('expect consumes when it defined', () => {\r\n            const consumes: string[] = [\r\n                SwaggerDefinitionConstant.Consume.JSON,\r\n                SwaggerDefinitionConstant.Consume.XML,\r\n            ];\r\n\r\n            SwaggerService.getInstance().setConsumes(consumes);\r\n\r\n            expect(\r\n                SwaggerService.getInstance().getData().consumes\r\n            ).to.deep.equal(consumes);\r\n        });\r\n    });\r\n\r\n    describe('setHost', () => {\r\n        it('expect host not exist when it not defined', () => {\r\n            expect(SwaggerService.getInstance().getData().host).to.be.not.exist;\r\n        });\r\n\r\n        it('expect host when it defined', () => {\r\n            const host: string = 'host';\r\n\r\n            SwaggerService.getInstance().setHost(host);\r\n\r\n            expect(SwaggerService.getInstance().getData().host).to.equal(host);\r\n        });\r\n    });\r\n\r\n    describe('setDefinitions', () => {\r\n        it('expect default definitions when they not defined', () => {\r\n            expect(\r\n                SwaggerService.getInstance().getData().definitions\r\n            ).to.deep.equal({});\r\n        });\r\n\r\n        it('expect definitions when they defined', () => {\r\n            const models: {\r\n                [key: string]: ISwaggerBuildDefinitionModel;\r\n            } = {\r\n                Version: {\r\n                    properties: {\r\n                        id: {\r\n                            description: 'Id of Version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Model.Property.Type\r\n                                    .STRING,\r\n                            example: ['123456789'],\r\n                        },\r\n                    },\r\n                },\r\n            };\r\n            SwaggerService.getInstance().setDefinitions(models);\r\n\r\n            expect(\r\n                SwaggerService.getInstance().getData().definitions\r\n            ).to.deep.equal({\r\n                Version: {\r\n                    properties: {\r\n                        id: {\r\n                            description: 'Id of Version',\r\n                            example: ['123456789'],\r\n                            type: 'string',\r\n                            enum: undefined,\r\n                            format: undefined,\r\n                        },\r\n                    },\r\n                    required: [],\r\n                    type: 'object',\r\n                },\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('addPath', () => {\r\n        it('expect new path', () => {\r\n            const args: IApiPathArgs = {\r\n                path: '/versions',\r\n                name: 'version',\r\n            };\r\n            const target: any = {\r\n                name: 'MyName',\r\n            };\r\n\r\n            SwaggerService.getInstance().addPath(args, target);\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal({\r\n                '/versions': {},\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('addOperationGet', () => {\r\n        const pathArgs: IApiPathArgs = {\r\n            path: '/versions',\r\n            name: 'Version',\r\n        };\r\n        const pathTarget: any = {\r\n            name: 'VersionsController',\r\n        };\r\n        const operationGetTarget: any = {\r\n            constructor: {\r\n                name: 'VersionsController',\r\n            },\r\n        };\r\n        let propertyKey: string | symbol;\r\n        let expectedPaths: { [key: string]: ISwaggerPath };\r\n\r\n        beforeEach(() => {\r\n            SwaggerService.getInstance().addPath(pathArgs, pathTarget);\r\n        });\r\n\r\n        describe('expect array', () => {\r\n            beforeEach(() => {\r\n                propertyKey = 'getVersions';\r\n                expectedPaths = {\r\n                    '/versions': {\r\n                        get: {\r\n                            consumes: [SwaggerDefinitionConstant.Consume.JSON],\r\n                            operationId: 'getVersions',\r\n                            produces: [SwaggerDefinitionConstant.Produce.JSON],\r\n                            responses: {\r\n                                200: {\r\n                                    description: 'Success',\r\n                                    schema: {\r\n                                        items: {\r\n                                            $ref: '#/definitions/Version',\r\n                                        },\r\n                                        type:\r\n                                            SwaggerDefinitionConstant.Response\r\n                                                .Type.ARRAY,\r\n                                    },\r\n                                },\r\n                            },\r\n                            tags: ['Version'],\r\n                        },\r\n                    },\r\n                };\r\n            });\r\n\r\n            it('expect default', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    responses: {\r\n                        200: {\r\n                            model: 'Version',\r\n                            type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                        },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n\r\n            it('expect description', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    description: 'get versions',\r\n                    responses: {\r\n                        200: {\r\n                            model: 'Version',\r\n                            type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                        },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expectedPaths['/versions'].get.description =\r\n                    operationGetArgs.description;\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n\r\n            it('expect summary', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    summary: 'get versions',\r\n                    responses: {\r\n                        200: {\r\n                            model: 'Version',\r\n                            type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                        },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expectedPaths['/versions'].get.summary =\r\n                    operationGetArgs.summary;\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n\r\n            it('expect consumes', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    consumes: [\r\n                        SwaggerDefinitionConstant.Consume.JSON,\r\n                        SwaggerDefinitionConstant.Consume.XML,\r\n                    ],\r\n                    responses: {\r\n                        200: {\r\n                            model: 'Version',\r\n                            type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                        },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expectedPaths['/versions'].get.consumes =\r\n                    operationGetArgs.consumes;\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n\r\n            it('expect produces', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    produces: [\r\n                        SwaggerDefinitionConstant.Produce.JSON,\r\n                        SwaggerDefinitionConstant.Produce.XML,\r\n                    ],\r\n                    responses: {\r\n                        200: {\r\n                            model: 'Version',\r\n                            type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                        },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expectedPaths['/versions'].get.produces =\r\n                    operationGetArgs.produces;\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n\r\n            it('expect responses', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    responses: {\r\n                        200: {\r\n                            description: 'return version object',\r\n                            type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                            model: 'Version',\r\n                        },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expectedPaths['/versions'].get.responses[200].description =\r\n                    operationGetArgs.responses[200].description;\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n        });\r\n\r\n        describe('expect object', () => {\r\n            beforeEach(() => {\r\n                propertyKey = 'getVersion';\r\n                expectedPaths = {\r\n                    '/versions/{id}': {\r\n                        get: {\r\n                            consumes: [SwaggerDefinitionConstant.Consume.JSON],\r\n                            operationId: 'getVersion',\r\n                            produces: [SwaggerDefinitionConstant.Produce.JSON],\r\n                            responses: {\r\n                                200: {\r\n                                    description: 'Success',\r\n                                    schema: {\r\n                                        $ref: '#/definitions/Version',\r\n                                    },\r\n                                },\r\n                            },\r\n                            tags: ['Version'],\r\n                        },\r\n                    },\r\n                };\r\n            });\r\n\r\n            it('expect default', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    path: '/{id}',\r\n                    responses: {\r\n                        200: { model: 'Version' },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n\r\n            it('expect description', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    path: '/{id}',\r\n                    description: 'get version',\r\n                    responses: {\r\n                        200: { model: 'Version' },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expectedPaths['/versions/{id}'].get.description =\r\n                    operationGetArgs.description;\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n\r\n            it('expect summary', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    path: '/{id}',\r\n                    summary: 'get version',\r\n                    responses: {\r\n                        200: { model: 'Version' },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expectedPaths['/versions/{id}'].get.summary =\r\n                    operationGetArgs.summary;\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n\r\n            it('expect consumes', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    path: '/{id}',\r\n                    consumes: [\r\n                        SwaggerDefinitionConstant.Consume.JSON,\r\n                        SwaggerDefinitionConstant.Consume.XML,\r\n                    ],\r\n                    responses: {\r\n                        200: { model: 'Version' },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expectedPaths['/versions/{id}'].get.consumes =\r\n                    operationGetArgs.consumes;\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n\r\n            it('expect produces', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    path: '/{id}',\r\n                    produces: [\r\n                        SwaggerDefinitionConstant.Produce.JSON,\r\n                        SwaggerDefinitionConstant.Produce.XML,\r\n                    ],\r\n                    responses: {\r\n                        200: { model: 'Version' },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expectedPaths['/versions/{id}'].get.produces =\r\n                    operationGetArgs.produces;\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n\r\n            it('expect responses', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    path: '/{id}',\r\n                    responses: {\r\n                        200: {\r\n                            description: 'return version object',\r\n                            model: 'Version',\r\n                        },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expectedPaths['/versions/{id}'].get.responses[200].description =\r\n                    operationGetArgs.responses[200].description;\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('addOperationPost', () => {\r\n        const argsPath: IApiPathArgs = {\r\n            path: '/versions',\r\n            name: 'Version',\r\n        };\r\n        const targetPath: any = {\r\n            name: 'VersionController',\r\n        };\r\n        const targetOperationPost: any = {\r\n            constructor: {\r\n                name: 'VersionController',\r\n            },\r\n        };\r\n        const propertyKey: string | symbol = 'postVersion';\r\n        let expectedPaths: { [key: string]: ISwaggerPath };\r\n\r\n        beforeEach(() => {\r\n            SwaggerService.getInstance().addPath(argsPath, targetPath);\r\n            expectedPaths = {\r\n                '/versions': {\r\n                    post: {\r\n                        parameters: [\r\n                            {\r\n                                allowEmptyValue: undefined,\r\n                                default: undefined,\r\n                                deprecated: undefined,\r\n                                description: 'New versions',\r\n                                format: undefined,\r\n                                maximum: undefined,\r\n                                minimum: undefined,\r\n                                in: SwaggerDefinitionConstant.Parameter.In.BODY,\r\n                                name:\r\n                                    SwaggerDefinitionConstant.Parameter.In.BODY,\r\n                                required: true,\r\n                                schema: {\r\n                                    $ref: '#/definitions/Version',\r\n                                },\r\n                                type: undefined,\r\n                            },\r\n                        ],\r\n                        consumes: [SwaggerDefinitionConstant.Consume.JSON],\r\n                        operationId: propertyKey,\r\n                        produces: [SwaggerDefinitionConstant.Produce.JSON],\r\n                        responses: {\r\n                            200: {\r\n                                description: 'Success',\r\n                                schema: {\r\n                                    items: {\r\n                                        $ref: '#/definitions/Version',\r\n                                    },\r\n                                    type:\r\n                                        SwaggerDefinitionConstant.Response.Type\r\n                                            .ARRAY,\r\n                                },\r\n                            },\r\n                        },\r\n                        tags: ['Version'],\r\n                    },\r\n                },\r\n            };\r\n        });\r\n\r\n        it('expect default', () => {\r\n            const argsOperationPost: IApiOperationPostArgs = {\r\n                parameters: {\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: {\r\n                        model: 'Version',\r\n                        type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                    },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPost(\r\n                argsOperationPost,\r\n                targetOperationPost,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect description', () => {\r\n            const argsOperationPost: IApiOperationPostArgs = {\r\n                description: 'post version',\r\n                parameters: {\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: {\r\n                        model: 'Version',\r\n                        type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                    },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPost(\r\n                argsOperationPost,\r\n                targetOperationPost,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions'].post.description =\r\n                argsOperationPost.description;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect summary', () => {\r\n            const argsOperationPost: IApiOperationPostArgs = {\r\n                summary: 'post version',\r\n                parameters: {\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: {\r\n                        model: 'Version',\r\n                        type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                    },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPost(\r\n                argsOperationPost,\r\n                targetOperationPost,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions'].post.summary = argsOperationPost.summary;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect consumes', () => {\r\n            const argsOperationPost: IApiOperationPostArgs = {\r\n                consumes: [\r\n                    SwaggerDefinitionConstant.Consume.JSON,\r\n                    SwaggerDefinitionConstant.Consume.XML,\r\n                ],\r\n                parameters: {\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: {\r\n                        type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPost(\r\n                argsOperationPost,\r\n                targetOperationPost,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions'].post.consumes =\r\n                argsOperationPost.consumes;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect produces', () => {\r\n            const argsOperationPost: IApiOperationPostArgs = {\r\n                produces: [\r\n                    SwaggerDefinitionConstant.Consume.JSON,\r\n                    SwaggerDefinitionConstant.Consume.XML,\r\n                ],\r\n                parameters: {\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: {\r\n                        type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPost(\r\n                argsOperationPost,\r\n                targetOperationPost,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions'].post.produces =\r\n                argsOperationPost.produces;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('addOperationPut', () => {\r\n        const argsPath: IApiPathArgs = {\r\n            path: '/versions',\r\n            name: 'Version',\r\n        };\r\n        const targetPath: any = {\r\n            name: 'VersionController',\r\n        };\r\n        const targetOperationPut: any = {\r\n            constructor: {\r\n                name: 'VersionController',\r\n            },\r\n        };\r\n        const propertyKey: string | symbol = 'putVersion';\r\n        let expectedPaths: { [key: string]: ISwaggerPath };\r\n\r\n        beforeEach(() => {\r\n            SwaggerService.getInstance().addPath(argsPath, targetPath);\r\n            expectedPaths = {\r\n                '/versions/{id}': {\r\n                    put: {\r\n                        parameters: [\r\n                            {\r\n                                allowEmptyValue: undefined,\r\n                                default: undefined,\r\n                                deprecated: undefined,\r\n                                in: 'path',\r\n                                format: undefined,\r\n                                description: 'Id of version',\r\n                                maximum: undefined,\r\n                                minimum: undefined,\r\n                                name: 'id',\r\n                                required: true,\r\n                                type:\r\n                                    SwaggerDefinitionConstant.Parameter.Type\r\n                                        .STRING,\r\n                            },\r\n                            {\r\n                                allowEmptyValue: undefined,\r\n                                default: undefined,\r\n                                deprecated: undefined,\r\n                                description: 'New versions',\r\n                                format: undefined,\r\n                                in: SwaggerDefinitionConstant.Parameter.In.BODY,\r\n                                maximum: undefined,\r\n                                minimum: undefined,\r\n                                name:\r\n                                    SwaggerDefinitionConstant.Parameter.In.BODY,\r\n                                required: true,\r\n                                schema: {\r\n                                    $ref: '#/definitions/Version',\r\n                                },\r\n                                type: undefined,\r\n                            },\r\n                        ],\r\n                        consumes: [SwaggerDefinitionConstant.Consume.JSON],\r\n                        operationId: propertyKey,\r\n                        produces: [SwaggerDefinitionConstant.Produce.JSON],\r\n                        responses: {\r\n                            200: {\r\n                                description: 'Success',\r\n                                schema: {\r\n                                    $ref: '#/definitions/Version',\r\n                                },\r\n                            },\r\n                        },\r\n                        tags: ['Version'],\r\n                    },\r\n                },\r\n            };\r\n        });\r\n\r\n        it('expect default', () => {\r\n            const argsOperationPut: IApiOperationPutArgs = {\r\n                path: '/{id}',\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { model: 'Version' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPut(\r\n                argsOperationPut,\r\n                targetOperationPut,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect description', () => {\r\n            const argsOperationPut: IApiOperationPutArgs = {\r\n                path: '/{id}',\r\n                description: 'post version',\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { model: 'Version' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPut(\r\n                argsOperationPut,\r\n                targetOperationPut,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}'].put.description =\r\n                argsOperationPut.description;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect summary', () => {\r\n            const argsOperationPut: IApiOperationPutArgs = {\r\n                path: '/{id}',\r\n                summary: 'post version',\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { model: 'Version' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPut(\r\n                argsOperationPut,\r\n                targetOperationPut,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}'].put.summary =\r\n                argsOperationPut.summary;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect consumes', () => {\r\n            const argsOperationPut: IApiOperationPutArgs = {\r\n                path: '/{id}',\r\n                consumes: [\r\n                    SwaggerDefinitionConstant.Consume.JSON,\r\n                    SwaggerDefinitionConstant.Consume.XML,\r\n                ],\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { model: 'Version' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPut(\r\n                argsOperationPut,\r\n                targetOperationPut,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}'].put.consumes =\r\n                argsOperationPut.consumes;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect produces', () => {\r\n            const argsOperationPut: IApiOperationPutArgs = {\r\n                path: '/{id}',\r\n                produces: [\r\n                    SwaggerDefinitionConstant.Consume.JSON,\r\n                    SwaggerDefinitionConstant.Consume.XML,\r\n                ],\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { model: 'Version' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPut(\r\n                argsOperationPut,\r\n                targetOperationPut,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}'].put.produces =\r\n                argsOperationPut.produces;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('addOperationPatch', () => {\r\n        const argsPath: IApiPathArgs = {\r\n            path: '/versions',\r\n            name: 'Version',\r\n        };\r\n        const targetPath: any = {\r\n            name: 'VersionController',\r\n        };\r\n        const targetOperationPatch: any = {\r\n            constructor: {\r\n                name: 'VersionController',\r\n            },\r\n        };\r\n        const propertyKey: string | symbol = 'patchVersionDescription';\r\n        let expectedPaths: { [key: string]: ISwaggerPath };\r\n\r\n        beforeEach(() => {\r\n            SwaggerService.getInstance().addPath(argsPath, targetPath);\r\n            expectedPaths = {\r\n                '/versions/{id}/description': {\r\n                    patch: {\r\n                        parameters: [\r\n                            {\r\n                                allowEmptyValue: undefined,\r\n                                default: undefined,\r\n                                deprecated: undefined,\r\n                                in: 'path',\r\n                                maximum: undefined,\r\n                                minimum: undefined,\r\n                                description: 'Id of version',\r\n                                format: undefined,\r\n                                name: 'id',\r\n                                required: true,\r\n                                type:\r\n                                    SwaggerDefinitionConstant.Parameter.Type\r\n                                        .STRING,\r\n                            },\r\n                            {\r\n                                allowEmptyValue: undefined,\r\n                                default: undefined,\r\n                                deprecated: undefined,\r\n                                description: 'New versions',\r\n                                format: undefined,\r\n                                in: SwaggerDefinitionConstant.Parameter.In.BODY,\r\n                                maximum: undefined,\r\n                                minimum: undefined,\r\n\r\n                                name:\r\n                                    SwaggerDefinitionConstant.Parameter.In.BODY,\r\n                                required: true,\r\n                                schema: {\r\n                                    $ref: '#/definitions/Version',\r\n                                },\r\n                                type: undefined,\r\n                            },\r\n                        ],\r\n                        consumes: [SwaggerDefinitionConstant.Consume.JSON],\r\n                        operationId: propertyKey,\r\n                        produces: [SwaggerDefinitionConstant.Produce.JSON],\r\n                        responses: {\r\n                            200: {\r\n                                description: 'Success',\r\n                                schema: {\r\n                                    $ref: '#/definitions/Version',\r\n                                },\r\n                            },\r\n                        },\r\n                        tags: ['Version'],\r\n                    },\r\n                },\r\n            };\r\n        });\r\n\r\n        it('expect default', () => {\r\n            const argsOperationPatch: IApiOperationPatchArgs = {\r\n                path: '/{id}/description',\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { model: 'Version' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPatch(\r\n                argsOperationPatch,\r\n                targetOperationPatch,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect description', () => {\r\n            const argsOperationPatch: IApiOperationPutArgs = {\r\n                path: '/{id}/description',\r\n                description: 'patch version description',\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { model: 'Version' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPatch(\r\n                argsOperationPatch,\r\n                targetOperationPatch,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}/description'].patch.description =\r\n                argsOperationPatch.description;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect summary', () => {\r\n            const argsOperationPatch: IApiOperationPatchArgs = {\r\n                path: '/{id}/description',\r\n                summary: 'patch version description',\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { model: 'Version' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPatch(\r\n                argsOperationPatch,\r\n                targetOperationPatch,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}/description'].patch.summary =\r\n                argsOperationPatch.summary;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect consumes', () => {\r\n            const argsOperationPatch: IApiOperationPatchArgs = {\r\n                path: '/{id}/description',\r\n                consumes: [\r\n                    SwaggerDefinitionConstant.Consume.JSON,\r\n                    SwaggerDefinitionConstant.Consume.XML,\r\n                ],\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { model: 'Version' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPatch(\r\n                argsOperationPatch,\r\n                targetOperationPatch,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}/description'].patch.consumes =\r\n                argsOperationPatch.consumes;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect produces', () => {\r\n            const argsOperationPut: IApiOperationPutArgs = {\r\n                path: '/{id}/description',\r\n                produces: [\r\n                    SwaggerDefinitionConstant.Consume.JSON,\r\n                    SwaggerDefinitionConstant.Consume.XML,\r\n                ],\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { model: 'Version' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPatch(\r\n                argsOperationPut,\r\n                targetOperationPatch,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}/description'].patch.produces =\r\n                argsOperationPut.produces;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('addOperationDelete', () => {\r\n        const argsPath: IApiPathArgs = {\r\n            path: '/versions',\r\n            name: 'Version',\r\n        };\r\n        const targetPath: any = {\r\n            name: 'VersionController',\r\n        };\r\n        const targetOperationDelete: any = {\r\n            constructor: {\r\n                name: 'VersionController',\r\n            },\r\n        };\r\n        const propertyKey: string | symbol = 'deleteVersion';\r\n        let expectedPaths: { [key: string]: ISwaggerPath };\r\n\r\n        beforeEach(() => {\r\n            SwaggerService.getInstance().addPath(argsPath, targetPath);\r\n            expectedPaths = {\r\n                '/versions/{id}': {\r\n                    delete: {\r\n                        consumes: [SwaggerDefinitionConstant.Consume.JSON],\r\n                        operationId: propertyKey,\r\n                        parameters: [\r\n                            {\r\n                                allowEmptyValue: undefined,\r\n                                default: undefined,\r\n                                deprecated: undefined,\r\n                                in: 'path',\r\n                                format: undefined,\r\n                                description: 'Id of version',\r\n                                maximum: undefined,\r\n                                minimum: undefined,\r\n                                name: 'id',\r\n                                required: true,\r\n                                type:\r\n                                    SwaggerDefinitionConstant.Parameter.Type\r\n                                        .STRING,\r\n                            },\r\n                        ],\r\n                        produces: [SwaggerDefinitionConstant.Produce.JSON],\r\n                        responses: {\r\n                            200: {\r\n                                description: 'Success',\r\n                            },\r\n                        },\r\n                        tags: ['Version'],\r\n                    },\r\n                },\r\n            };\r\n        });\r\n\r\n        it('expect default', () => {\r\n            const argsOperationDelete: IApiOperationDeleteArgs = {\r\n                path: '/{id}',\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { description: 'Success' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationDelete(\r\n                argsOperationDelete,\r\n                targetOperationDelete,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect description', () => {\r\n            const argsOperationDelete: IApiOperationDeleteArgs = {\r\n                path: '/{id}',\r\n                description: 'delete version',\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { description: 'Success' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationDelete(\r\n                argsOperationDelete,\r\n                targetOperationDelete,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}'].delete.description =\r\n                argsOperationDelete.description;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect summary', () => {\r\n            const argsOperationDelete: IApiOperationDeleteArgs = {\r\n                path: '/{id}',\r\n                summary: 'delete version',\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { description: 'Success' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationDelete(\r\n                argsOperationDelete,\r\n                targetOperationDelete,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}'].delete.summary =\r\n                argsOperationDelete.summary;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect consumes', () => {\r\n            const argsOperationDelete: IApiOperationDeleteArgs = {\r\n                path: '/{id}',\r\n                consumes: [\r\n                    SwaggerDefinitionConstant.Consume.JSON,\r\n                    SwaggerDefinitionConstant.Consume.XML,\r\n                ],\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { description: 'Success' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationDelete(\r\n                argsOperationDelete,\r\n                targetOperationDelete,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}'].delete.consumes =\r\n                argsOperationDelete.consumes;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect produces', () => {\r\n            const argsOperationDelete: IApiOperationDeleteArgs = {\r\n                path: '/{id}',\r\n                produces: [\r\n                    SwaggerDefinitionConstant.Consume.JSON,\r\n                    SwaggerDefinitionConstant.Consume.XML,\r\n                ],\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { description: 'Success' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationDelete(\r\n                argsOperationDelete,\r\n                targetOperationDelete,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}'].delete.produces =\r\n                argsOperationDelete.produces;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n    });\r\n});\r\n"]}