{"version":3,"sources":["../../lib/swagger-express-ts-lib/src/swagger.service.spec.ts"],"names":[],"mappings":"","file":"swagger.service.spec.d.ts","sourcesContent":["import { SwaggerService } from './swagger.service';\r\nimport * as chai from 'chai';\r\nimport {\r\n    ISwaggerExternalDocs,\r\n    ISwaggerInfo,\r\n    ISwaggerDefinition,\r\n    ISwaggerDefinitionProperty,\r\n    ISwaggerPath,\r\n} from './i-swagger';\r\nimport { IApiPathArgs } from './api-path.decorator';\r\nimport { IApiOperationGetArgs } from './api-operation-get.decorator';\r\nimport { IApiOperationPostArgs } from './api-operation-post.decorator';\r\nimport { IApiOperationPutArgs } from './api-operation-put.decorator';\r\nimport { IApiOperationPatchArgs } from './api-operation-patch.decorator';\r\nimport { IApiOperationDeleteArgs } from './api-operation-delete.decorator';\r\nimport { SwaggerDefinitionConstant } from './swagger-definition.constant';\r\nimport { ISwaggerBuildDefinitionModel } from './swagger.builder';\r\nconst expect = chai.expect;\r\n\r\ndescribe('SwaggerService', () => {\r\n    beforeEach(() => {\r\n        SwaggerService.getInstance().resetData();\r\n        console.log('reset');\r\n    });\r\n\r\n    describe('setBasePath', () => {\r\n        it('expect basePath default \"/\"', () => {\r\n            expect(SwaggerService.getInstance().getData().basePath).to.equal(\r\n                '/'\r\n            );\r\n        });\r\n\r\n        it('expect basePath exist when it setted', () => {\r\n            const basePath = '/basepath';\r\n\r\n            SwaggerService.getInstance().setBasePath(basePath);\r\n\r\n            expect(SwaggerService.getInstance().getData().basePath).to.equal(\r\n                basePath\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('setOpenapi', () => {\r\n        it('expect default openapi when it not setted', () => {\r\n            expect(SwaggerService.getInstance().getData().openapi).to.not.exist;\r\n        });\r\n\r\n        it('expect openapi exist when it setted', () => {\r\n            const openapi = 'openapi';\r\n\r\n            SwaggerService.getInstance().setOpenapi(openapi);\r\n\r\n            expect(SwaggerService.getInstance().getData().openapi).to.equal(\r\n                openapi\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('setInfo', () => {\r\n        it('expect default info', () => {\r\n            expect(SwaggerService.getInstance().getData().info.title).to.equal(\r\n                ''\r\n            );\r\n            expect(\r\n                SwaggerService.getInstance().getData().info.version\r\n            ).to.equal('');\r\n        });\r\n\r\n        it('expect info when it defined', () => {\r\n            const info: ISwaggerInfo = {\r\n                title: 'Title',\r\n                version: '1.0.1',\r\n            };\r\n\r\n            SwaggerService.getInstance().setInfo(info);\r\n\r\n            expect(SwaggerService.getInstance().getData().info.title).to.equal(\r\n                info.title\r\n            );\r\n            expect(\r\n                SwaggerService.getInstance().getData().info.version\r\n            ).to.equal(info.version);\r\n        });\r\n    });\r\n\r\n    describe('setSchemes', () => {\r\n        it('expect default schemes when it not defined', () => {\r\n            expect(SwaggerService.getInstance().getData().schemes)\r\n                .to.have.lengthOf(1)\r\n                .to.have.members([SwaggerDefinitionConstant.Scheme.HTTP]);\r\n        });\r\n\r\n        it('expect schemes when it defined', () => {\r\n            const schemes: string[] = [\r\n                SwaggerDefinitionConstant.Scheme.HTTP,\r\n                SwaggerDefinitionConstant.Scheme.HTTPS,\r\n            ];\r\n\r\n            SwaggerService.getInstance().setSchemes(schemes);\r\n\r\n            expect(\r\n                SwaggerService.getInstance().getData().schemes\r\n            ).to.deep.equal(schemes);\r\n        });\r\n    });\r\n\r\n    describe('setExternalDocs', () => {\r\n        it('expect default externalDocs when it not defined', () => {\r\n            expect(SwaggerService.getInstance().getData().externalDocs).to.not\r\n                .exist;\r\n        });\r\n\r\n        it('expect externalDocs when it defined', () => {\r\n            const externalDocs: ISwaggerExternalDocs = {\r\n                url: 'Mon url',\r\n            };\r\n\r\n            SwaggerService.getInstance().setExternalDocs(externalDocs);\r\n\r\n            expect(\r\n                SwaggerService.getInstance().getData().externalDocs.url\r\n            ).to.equal(externalDocs.url);\r\n        });\r\n    });\r\n\r\n    describe('setProduces', () => {\r\n        it('expect default produces when it not defined', () => {\r\n            expect(SwaggerService.getInstance().getData().produces)\r\n                .to.have.lengthOf(1)\r\n                .to.have.members([SwaggerDefinitionConstant.Produce.JSON]);\r\n        });\r\n\r\n        it('expect produces when it defined', () => {\r\n            const produces: string[] = [\r\n                SwaggerDefinitionConstant.Produce.JSON,\r\n                SwaggerDefinitionConstant.Produce.XML,\r\n            ];\r\n\r\n            SwaggerService.getInstance().setProduces(produces);\r\n\r\n            expect(\r\n                SwaggerService.getInstance().getData().produces\r\n            ).to.deep.equal(produces);\r\n        });\r\n    });\r\n\r\n    describe('setConsumes', () => {\r\n        it('expect default consumes when it not defined', () => {\r\n            expect(SwaggerService.getInstance().getData().consumes)\r\n                .to.have.lengthOf(1)\r\n                .to.have.members([SwaggerDefinitionConstant.Consume.JSON]);\r\n        });\r\n\r\n        it('expect consumes when it defined', () => {\r\n            const consumes: string[] = [\r\n                SwaggerDefinitionConstant.Consume.JSON,\r\n                SwaggerDefinitionConstant.Consume.XML,\r\n            ];\r\n\r\n            SwaggerService.getInstance().setConsumes(consumes);\r\n\r\n            expect(\r\n                SwaggerService.getInstance().getData().consumes\r\n            ).to.deep.equal(consumes);\r\n        });\r\n    });\r\n\r\n    describe('setHost', () => {\r\n        it('expect host not exist when it not defined', () => {\r\n            expect(SwaggerService.getInstance().getData().host).to.be.not.exist;\r\n        });\r\n\r\n        it('expect host when it defined', () => {\r\n            const host: string = 'host';\r\n\r\n            SwaggerService.getInstance().setHost(host);\r\n\r\n            expect(SwaggerService.getInstance().getData().host).to.equal(host);\r\n        });\r\n    });\r\n\r\n    describe('setDefinitions', () => {\r\n        it('expect default definitions when they not defined', () => {\r\n            expect(\r\n                SwaggerService.getInstance().getData().definitions\r\n            ).to.deep.equal({});\r\n        });\r\n\r\n        it('expect definitions when they defined', () => {\r\n            const models: {\r\n                [key: string]: ISwaggerBuildDefinitionModel;\r\n            } = {\r\n                Version: {\r\n                    properties: {\r\n                        id: {\r\n                            description: 'Id of Version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Model.Property.Type\r\n                                    .STRING,\r\n                            example: ['123456789'],\r\n                        },\r\n                    },\r\n                },\r\n            };\r\n            SwaggerService.getInstance().setDefinitions(models);\r\n\r\n            expect(\r\n                SwaggerService.getInstance().getData().definitions\r\n            ).to.deep.equal({\r\n                Version: {\r\n                    properties: {\r\n                        id: {\r\n                            description: 'Id of Version',\r\n                            example: ['123456789'],\r\n                            type: 'string',\r\n                            enum: undefined,\r\n                            format: undefined,\r\n                        },\r\n                    },\r\n                    required: [],\r\n                    type: 'object',\r\n                },\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('addPath', () => {\r\n        it('expect new path', () => {\r\n            const args: IApiPathArgs = {\r\n                path: '/versions',\r\n                name: 'version',\r\n            };\r\n            const target: any = {\r\n                name: 'MyName',\r\n            };\r\n\r\n            SwaggerService.getInstance().addPath(args, target);\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal({\r\n                '/versions': {},\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('addOperationGet', () => {\r\n        const pathArgs: IApiPathArgs = {\r\n            path: '/versions',\r\n            name: 'Version',\r\n        };\r\n        const pathTarget: any = {\r\n            name: 'VersionsController',\r\n        };\r\n        const operationGetTarget: any = {\r\n            constructor: {\r\n                name: 'VersionsController',\r\n            },\r\n        };\r\n        let propertyKey: string | symbol;\r\n        let expectedPaths: { [key: string]: ISwaggerPath };\r\n\r\n        beforeEach(() => {\r\n            SwaggerService.getInstance().addPath(pathArgs, pathTarget);\r\n        });\r\n\r\n        describe('expect array', () => {\r\n            beforeEach(() => {\r\n                propertyKey = 'getVersions';\r\n                expectedPaths = {\r\n                    '/versions': {\r\n                        get: {\r\n                            consumes: [SwaggerDefinitionConstant.Consume.JSON],\r\n                            operationId: 'getVersions',\r\n                            produces: [SwaggerDefinitionConstant.Produce.JSON],\r\n                            responses: {\r\n                                200: {\r\n                                    description: 'Success',\r\n                                    schema: {\r\n                                        items: {\r\n                                            $ref: '#/definitions/Version',\r\n                                        },\r\n                                        type:\r\n                                            SwaggerDefinitionConstant.Response\r\n                                                .Type.ARRAY,\r\n                                    },\r\n                                },\r\n                            },\r\n                            tags: ['Version'],\r\n                        },\r\n                    },\r\n                };\r\n            });\r\n\r\n            it('expect default', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    responses: {\r\n                        200: {\r\n                            model: 'Version',\r\n                            type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                        },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n\r\n            it('expect description', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    description: 'get versions',\r\n                    responses: {\r\n                        200: {\r\n                            model: 'Version',\r\n                            type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                        },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expectedPaths['/versions'].get.description =\r\n                    operationGetArgs.description;\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n\r\n            it('expect summary', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    summary: 'get versions',\r\n                    responses: {\r\n                        200: {\r\n                            model: 'Version',\r\n                            type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                        },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expectedPaths['/versions'].get.summary =\r\n                    operationGetArgs.summary;\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n\r\n            it('expect consumes', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    consumes: [\r\n                        SwaggerDefinitionConstant.Consume.JSON,\r\n                        SwaggerDefinitionConstant.Consume.XML,\r\n                    ],\r\n                    responses: {\r\n                        200: {\r\n                            model: 'Version',\r\n                            type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                        },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expectedPaths['/versions'].get.consumes =\r\n                    operationGetArgs.consumes;\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n\r\n            it('expect produces', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    produces: [\r\n                        SwaggerDefinitionConstant.Produce.JSON,\r\n                        SwaggerDefinitionConstant.Produce.XML,\r\n                    ],\r\n                    responses: {\r\n                        200: {\r\n                            model: 'Version',\r\n                            type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                        },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expectedPaths['/versions'].get.produces =\r\n                    operationGetArgs.produces;\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n\r\n            it('expect responses', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    responses: {\r\n                        200: {\r\n                            description: 'return version object',\r\n                            type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                            model: 'Version',\r\n                        },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expectedPaths['/versions'].get.responses[200].description =\r\n                    operationGetArgs.responses[200].description;\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n        });\r\n\r\n        describe('expect object', () => {\r\n            beforeEach(() => {\r\n                propertyKey = 'getVersion';\r\n                expectedPaths = {\r\n                    '/versions/{id}': {\r\n                        get: {\r\n                            consumes: [SwaggerDefinitionConstant.Consume.JSON],\r\n                            operationId: 'getVersion',\r\n                            produces: [SwaggerDefinitionConstant.Produce.JSON],\r\n                            responses: {\r\n                                200: {\r\n                                    description: 'Success',\r\n                                    schema: {\r\n                                        $ref: '#/definitions/Version',\r\n                                    },\r\n                                },\r\n                            },\r\n                            tags: ['Version'],\r\n                        },\r\n                    },\r\n                };\r\n            });\r\n\r\n            it('expect default', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    path: '/{id}',\r\n                    responses: {\r\n                        200: { model: 'Version' },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n\r\n            it('expect description', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    path: '/{id}',\r\n                    description: 'get version',\r\n                    responses: {\r\n                        200: { model: 'Version' },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expectedPaths['/versions/{id}'].get.description =\r\n                    operationGetArgs.description;\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n\r\n            it('expect summary', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    path: '/{id}',\r\n                    summary: 'get version',\r\n                    responses: {\r\n                        200: { model: 'Version' },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expectedPaths['/versions/{id}'].get.summary =\r\n                    operationGetArgs.summary;\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n\r\n            it('expect consumes', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    path: '/{id}',\r\n                    consumes: [\r\n                        SwaggerDefinitionConstant.Consume.JSON,\r\n                        SwaggerDefinitionConstant.Consume.XML,\r\n                    ],\r\n                    responses: {\r\n                        200: { model: 'Version' },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expectedPaths['/versions/{id}'].get.consumes =\r\n                    operationGetArgs.consumes;\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n\r\n            it('expect produces', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    path: '/{id}',\r\n                    produces: [\r\n                        SwaggerDefinitionConstant.Produce.JSON,\r\n                        SwaggerDefinitionConstant.Produce.XML,\r\n                    ],\r\n                    responses: {\r\n                        200: { model: 'Version' },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expectedPaths['/versions/{id}'].get.produces =\r\n                    operationGetArgs.produces;\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n\r\n            it('expect responses', () => {\r\n                const operationGetArgs: IApiOperationGetArgs = {\r\n                    path: '/{id}',\r\n                    responses: {\r\n                        200: {\r\n                            description: 'return version object',\r\n                            model: 'Version',\r\n                        },\r\n                    },\r\n                };\r\n\r\n                SwaggerService.getInstance().addOperationGet(\r\n                    operationGetArgs,\r\n                    operationGetTarget,\r\n                    propertyKey\r\n                );\r\n\r\n                SwaggerService.getInstance().buildSwagger();\r\n                expectedPaths['/versions/{id}'].get.responses[200].description =\r\n                    operationGetArgs.responses[200].description;\r\n                expect(\r\n                    SwaggerService.getInstance().getData().paths\r\n                ).to.deep.equal(expectedPaths);\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('addOperationPost', () => {\r\n        const argsPath: IApiPathArgs = {\r\n            path: '/versions',\r\n            name: 'Version',\r\n        };\r\n        const targetPath: any = {\r\n            name: 'VersionController',\r\n        };\r\n        const targetOperationPost: any = {\r\n            constructor: {\r\n                name: 'VersionController',\r\n            },\r\n        };\r\n        const propertyKey: string | symbol = 'postVersion';\r\n        let expectedPaths: { [key: string]: ISwaggerPath };\r\n\r\n        beforeEach(() => {\r\n            SwaggerService.getInstance().addPath(argsPath, targetPath);\r\n            expectedPaths = {\r\n                '/versions': {\r\n                    post: {\r\n                        parameters: [\r\n                            {\r\n                                allowEmptyValue: undefined,\r\n                                default: undefined,\r\n                                deprecated: undefined,\r\n                                description: 'New versions',\r\n                                format: undefined,\r\n                                maximum: undefined,\r\n                                minimum: undefined,\r\n                                in: SwaggerDefinitionConstant.Parameter.In.BODY,\r\n                                name:\r\n                                    SwaggerDefinitionConstant.Parameter.In.BODY,\r\n                                required: true,\r\n                                schema: {\r\n                                    $ref: '#/definitions/Version',\r\n                                },\r\n                                type: undefined,\r\n                            },\r\n                        ],\r\n                        consumes: [SwaggerDefinitionConstant.Consume.JSON],\r\n                        operationId: propertyKey,\r\n                        produces: [SwaggerDefinitionConstant.Produce.JSON],\r\n                        responses: {\r\n                            200: {\r\n                                description: 'Success',\r\n                                schema: {\r\n                                    items: {\r\n                                        $ref: '#/definitions/Version',\r\n                                    },\r\n                                    type:\r\n                                        SwaggerDefinitionConstant.Response.Type\r\n                                            .ARRAY,\r\n                                },\r\n                            },\r\n                        },\r\n                        tags: ['Version'],\r\n                    },\r\n                },\r\n            };\r\n        });\r\n\r\n        it('expect default', () => {\r\n            const argsOperationPost: IApiOperationPostArgs = {\r\n                parameters: {\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: {\r\n                        model: 'Version',\r\n                        type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                    },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPost(\r\n                argsOperationPost,\r\n                targetOperationPost,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect description', () => {\r\n            const argsOperationPost: IApiOperationPostArgs = {\r\n                description: 'post version',\r\n                parameters: {\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: {\r\n                        model: 'Version',\r\n                        type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                    },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPost(\r\n                argsOperationPost,\r\n                targetOperationPost,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions'].post.description =\r\n                argsOperationPost.description;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect summary', () => {\r\n            const argsOperationPost: IApiOperationPostArgs = {\r\n                summary: 'post version',\r\n                parameters: {\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: {\r\n                        model: 'Version',\r\n                        type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                    },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPost(\r\n                argsOperationPost,\r\n                targetOperationPost,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions'].post.summary = argsOperationPost.summary;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect consumes', () => {\r\n            const argsOperationPost: IApiOperationPostArgs = {\r\n                consumes: [\r\n                    SwaggerDefinitionConstant.Consume.JSON,\r\n                    SwaggerDefinitionConstant.Consume.XML,\r\n                ],\r\n                parameters: {\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: {\r\n                        type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPost(\r\n                argsOperationPost,\r\n                targetOperationPost,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions'].post.consumes =\r\n                argsOperationPost.consumes;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect produces', () => {\r\n            const argsOperationPost: IApiOperationPostArgs = {\r\n                produces: [\r\n                    SwaggerDefinitionConstant.Consume.JSON,\r\n                    SwaggerDefinitionConstant.Consume.XML,\r\n                ],\r\n                parameters: {\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: {\r\n                        type: SwaggerDefinitionConstant.Response.Type.ARRAY,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPost(\r\n                argsOperationPost,\r\n                targetOperationPost,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions'].post.produces =\r\n                argsOperationPost.produces;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('addOperationPut', () => {\r\n        const argsPath: IApiPathArgs = {\r\n            path: '/versions',\r\n            name: 'Version',\r\n        };\r\n        const targetPath: any = {\r\n            name: 'VersionController',\r\n        };\r\n        const targetOperationPut: any = {\r\n            constructor: {\r\n                name: 'VersionController',\r\n            },\r\n        };\r\n        const propertyKey: string | symbol = 'putVersion';\r\n        let expectedPaths: { [key: string]: ISwaggerPath };\r\n\r\n        beforeEach(() => {\r\n            SwaggerService.getInstance().addPath(argsPath, targetPath);\r\n            expectedPaths = {\r\n                '/versions/{id}': {\r\n                    put: {\r\n                        parameters: [\r\n                            {\r\n                                allowEmptyValue: undefined,\r\n                                default: undefined,\r\n                                deprecated: undefined,\r\n                                in: 'path',\r\n                                format: undefined,\r\n                                description: 'Id of version',\r\n                                maximum: undefined,\r\n                                minimum: undefined,\r\n                                name: 'id',\r\n                                required: true,\r\n                                type:\r\n                                    SwaggerDefinitionConstant.Parameter.Type\r\n                                        .STRING,\r\n                            },\r\n                            {\r\n                                allowEmptyValue: undefined,\r\n                                default: undefined,\r\n                                deprecated: undefined,\r\n                                description: 'New versions',\r\n                                format: undefined,\r\n                                in: SwaggerDefinitionConstant.Parameter.In.BODY,\r\n                                maximum: undefined,\r\n                                minimum: undefined,\r\n                                name:\r\n                                    SwaggerDefinitionConstant.Parameter.In.BODY,\r\n                                required: true,\r\n                                schema: {\r\n                                    $ref: '#/definitions/Version',\r\n                                },\r\n                                type: undefined,\r\n                            },\r\n                        ],\r\n                        consumes: [SwaggerDefinitionConstant.Consume.JSON],\r\n                        operationId: propertyKey,\r\n                        produces: [SwaggerDefinitionConstant.Produce.JSON],\r\n                        responses: {\r\n                            200: {\r\n                                description: 'Success',\r\n                                schema: {\r\n                                    $ref: '#/definitions/Version',\r\n                                },\r\n                            },\r\n                        },\r\n                        tags: ['Version'],\r\n                    },\r\n                },\r\n            };\r\n        });\r\n\r\n        it('expect default', () => {\r\n            const argsOperationPut: IApiOperationPutArgs = {\r\n                path: '/{id}',\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { model: 'Version' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPut(\r\n                argsOperationPut,\r\n                targetOperationPut,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect description', () => {\r\n            const argsOperationPut: IApiOperationPutArgs = {\r\n                path: '/{id}',\r\n                description: 'post version',\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { model: 'Version' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPut(\r\n                argsOperationPut,\r\n                targetOperationPut,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}'].put.description =\r\n                argsOperationPut.description;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect summary', () => {\r\n            const argsOperationPut: IApiOperationPutArgs = {\r\n                path: '/{id}',\r\n                summary: 'post version',\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { model: 'Version' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPut(\r\n                argsOperationPut,\r\n                targetOperationPut,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}'].put.summary =\r\n                argsOperationPut.summary;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect consumes', () => {\r\n            const argsOperationPut: IApiOperationPutArgs = {\r\n                path: '/{id}',\r\n                consumes: [\r\n                    SwaggerDefinitionConstant.Consume.JSON,\r\n                    SwaggerDefinitionConstant.Consume.XML,\r\n                ],\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { model: 'Version' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPut(\r\n                argsOperationPut,\r\n                targetOperationPut,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}'].put.consumes =\r\n                argsOperationPut.consumes;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect produces', () => {\r\n            const argsOperationPut: IApiOperationPutArgs = {\r\n                path: '/{id}',\r\n                produces: [\r\n                    SwaggerDefinitionConstant.Consume.JSON,\r\n                    SwaggerDefinitionConstant.Consume.XML,\r\n                ],\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { model: 'Version' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPut(\r\n                argsOperationPut,\r\n                targetOperationPut,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}'].put.produces =\r\n                argsOperationPut.produces;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('addOperationPatch', () => {\r\n        const argsPath: IApiPathArgs = {\r\n            path: '/versions',\r\n            name: 'Version',\r\n        };\r\n        const targetPath: any = {\r\n            name: 'VersionController',\r\n        };\r\n        const targetOperationPatch: any = {\r\n            constructor: {\r\n                name: 'VersionController',\r\n            },\r\n        };\r\n        const propertyKey: string | symbol = 'patchVersionDescription';\r\n        let expectedPaths: { [key: string]: ISwaggerPath };\r\n\r\n        beforeEach(() => {\r\n            SwaggerService.getInstance().addPath(argsPath, targetPath);\r\n            expectedPaths = {\r\n                '/versions/{id}/description': {\r\n                    patch: {\r\n                        parameters: [\r\n                            {\r\n                                allowEmptyValue: undefined,\r\n                                default: undefined,\r\n                                deprecated: undefined,\r\n                                in: 'path',\r\n                                maximum: undefined,\r\n                                minimum: undefined,\r\n                                description: 'Id of version',\r\n                                format: undefined,\r\n                                name: 'id',\r\n                                required: true,\r\n                                type:\r\n                                    SwaggerDefinitionConstant.Parameter.Type\r\n                                        .STRING,\r\n                            },\r\n                            {\r\n                                allowEmptyValue: undefined,\r\n                                default: undefined,\r\n                                deprecated: undefined,\r\n                                description: 'New versions',\r\n                                format: undefined,\r\n                                in: SwaggerDefinitionConstant.Parameter.In.BODY,\r\n                                maximum: undefined,\r\n                                minimum: undefined,\r\n\r\n                                name:\r\n                                    SwaggerDefinitionConstant.Parameter.In.BODY,\r\n                                required: true,\r\n                                schema: {\r\n                                    $ref: '#/definitions/Version',\r\n                                },\r\n                                type: undefined,\r\n                            },\r\n                        ],\r\n                        consumes: [SwaggerDefinitionConstant.Consume.JSON],\r\n                        operationId: propertyKey,\r\n                        produces: [SwaggerDefinitionConstant.Produce.JSON],\r\n                        responses: {\r\n                            200: {\r\n                                description: 'Success',\r\n                                schema: {\r\n                                    $ref: '#/definitions/Version',\r\n                                },\r\n                            },\r\n                        },\r\n                        tags: ['Version'],\r\n                    },\r\n                },\r\n            };\r\n        });\r\n\r\n        it('expect default', () => {\r\n            const argsOperationPatch: IApiOperationPatchArgs = {\r\n                path: '/{id}/description',\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { model: 'Version' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPatch(\r\n                argsOperationPatch,\r\n                targetOperationPatch,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect description', () => {\r\n            const argsOperationPatch: IApiOperationPutArgs = {\r\n                path: '/{id}/description',\r\n                description: 'patch version description',\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { model: 'Version' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPatch(\r\n                argsOperationPatch,\r\n                targetOperationPatch,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}/description'].patch.description =\r\n                argsOperationPatch.description;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect summary', () => {\r\n            const argsOperationPatch: IApiOperationPatchArgs = {\r\n                path: '/{id}/description',\r\n                summary: 'patch version description',\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { model: 'Version' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPatch(\r\n                argsOperationPatch,\r\n                targetOperationPatch,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}/description'].patch.summary =\r\n                argsOperationPatch.summary;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect consumes', () => {\r\n            const argsOperationPatch: IApiOperationPatchArgs = {\r\n                path: '/{id}/description',\r\n                consumes: [\r\n                    SwaggerDefinitionConstant.Consume.JSON,\r\n                    SwaggerDefinitionConstant.Consume.XML,\r\n                ],\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { model: 'Version' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPatch(\r\n                argsOperationPatch,\r\n                targetOperationPatch,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}/description'].patch.consumes =\r\n                argsOperationPatch.consumes;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect produces', () => {\r\n            const argsOperationPut: IApiOperationPutArgs = {\r\n                path: '/{id}/description',\r\n                produces: [\r\n                    SwaggerDefinitionConstant.Consume.JSON,\r\n                    SwaggerDefinitionConstant.Consume.XML,\r\n                ],\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                    body: {\r\n                        description: 'New versions',\r\n                        required: true,\r\n                        model: 'Version',\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { model: 'Version' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationPatch(\r\n                argsOperationPut,\r\n                targetOperationPatch,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}/description'].patch.produces =\r\n                argsOperationPut.produces;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('addOperationDelete', () => {\r\n        const argsPath: IApiPathArgs = {\r\n            path: '/versions',\r\n            name: 'Version',\r\n        };\r\n        const targetPath: any = {\r\n            name: 'VersionController',\r\n        };\r\n        const targetOperationDelete: any = {\r\n            constructor: {\r\n                name: 'VersionController',\r\n            },\r\n        };\r\n        const propertyKey: string | symbol = 'deleteVersion';\r\n        let expectedPaths: { [key: string]: ISwaggerPath };\r\n\r\n        beforeEach(() => {\r\n            SwaggerService.getInstance().addPath(argsPath, targetPath);\r\n            expectedPaths = {\r\n                '/versions/{id}': {\r\n                    delete: {\r\n                        consumes: [SwaggerDefinitionConstant.Consume.JSON],\r\n                        operationId: propertyKey,\r\n                        parameters: [\r\n                            {\r\n                                allowEmptyValue: undefined,\r\n                                default: undefined,\r\n                                deprecated: undefined,\r\n                                in: 'path',\r\n                                format: undefined,\r\n                                description: 'Id of version',\r\n                                maximum: undefined,\r\n                                minimum: undefined,\r\n                                name: 'id',\r\n                                required: true,\r\n                                type:\r\n                                    SwaggerDefinitionConstant.Parameter.Type\r\n                                        .STRING,\r\n                            },\r\n                        ],\r\n                        produces: [SwaggerDefinitionConstant.Produce.JSON],\r\n                        responses: {\r\n                            200: {\r\n                                description: 'Success',\r\n                            },\r\n                        },\r\n                        tags: ['Version'],\r\n                    },\r\n                },\r\n            };\r\n        });\r\n\r\n        it('expect default', () => {\r\n            const argsOperationDelete: IApiOperationDeleteArgs = {\r\n                path: '/{id}',\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { description: 'Success' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationDelete(\r\n                argsOperationDelete,\r\n                targetOperationDelete,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect description', () => {\r\n            const argsOperationDelete: IApiOperationDeleteArgs = {\r\n                path: '/{id}',\r\n                description: 'delete version',\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { description: 'Success' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationDelete(\r\n                argsOperationDelete,\r\n                targetOperationDelete,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}'].delete.description =\r\n                argsOperationDelete.description;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect summary', () => {\r\n            const argsOperationDelete: IApiOperationDeleteArgs = {\r\n                path: '/{id}',\r\n                summary: 'delete version',\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { description: 'Success' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationDelete(\r\n                argsOperationDelete,\r\n                targetOperationDelete,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}'].delete.summary =\r\n                argsOperationDelete.summary;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect consumes', () => {\r\n            const argsOperationDelete: IApiOperationDeleteArgs = {\r\n                path: '/{id}',\r\n                consumes: [\r\n                    SwaggerDefinitionConstant.Consume.JSON,\r\n                    SwaggerDefinitionConstant.Consume.XML,\r\n                ],\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { description: 'Success' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationDelete(\r\n                argsOperationDelete,\r\n                targetOperationDelete,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}'].delete.consumes =\r\n                argsOperationDelete.consumes;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n\r\n        it('expect produces', () => {\r\n            const argsOperationDelete: IApiOperationDeleteArgs = {\r\n                path: '/{id}',\r\n                produces: [\r\n                    SwaggerDefinitionConstant.Consume.JSON,\r\n                    SwaggerDefinitionConstant.Consume.XML,\r\n                ],\r\n                parameters: {\r\n                    path: {\r\n                        id: {\r\n                            description: 'Id of version',\r\n                            type:\r\n                                SwaggerDefinitionConstant.Parameter.Type.STRING,\r\n                            required: true,\r\n                        },\r\n                    },\r\n                },\r\n                responses: {\r\n                    200: { description: 'Success' },\r\n                },\r\n            };\r\n\r\n            SwaggerService.getInstance().addOperationDelete(\r\n                argsOperationDelete,\r\n                targetOperationDelete,\r\n                propertyKey\r\n            );\r\n\r\n            SwaggerService.getInstance().buildSwagger();\r\n            expectedPaths['/versions/{id}'].delete.produces =\r\n                argsOperationDelete.produces;\r\n            expect(SwaggerService.getInstance().getData().paths).to.deep.equal(\r\n                expectedPaths\r\n            );\r\n        });\r\n    });\r\n});\r\n"]}