{"version":3,"sources":["../../lib/swagger-express-ts-lib/src/swagger-definition.constant.spec.ts"],"names":[],"mappings":"","file":"swagger-definition.constant.spec.d.ts","sourcesContent":["import * as chai from 'chai';\r\nimport { SwaggerDefinitionConstant } from '.';\r\nconst expect = chai.expect;\r\n\r\ndescribe('SwaggerDefinitionConstant', () => {\r\n    describe('Produce', () => {\r\n        it('expect JSON', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.JSON).exist;\r\n        });\r\n        it('expect XML', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.XML).exist;\r\n        });\r\n        it('expect ZIP', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.ZIP).exist;\r\n        });\r\n        it('expect PDF', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.PDF).exist;\r\n        });\r\n        it('expect X_WWW_FORM_URLENCODED', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.X_WWW_FORM_URLENCODED)\r\n                .exist;\r\n        });\r\n        it('expect FORM_DATA', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.FORM_DATA).exist;\r\n        });\r\n        it('expect TEXT_PLAIN', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.TEXT_PLAIN).exist;\r\n        });\r\n        it('expect TEXT_HTML', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.TEXT_HTML).exist;\r\n        });\r\n        it('expect PNG', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.PNG).exist;\r\n        });\r\n        it('expect GIF', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.GIF).exist;\r\n        });\r\n        it('expect JPEG', () => {\r\n            expect(SwaggerDefinitionConstant.Produce.JPEG).exist;\r\n        });\r\n    });\r\n\r\n    describe('Scheme', () => {\r\n        it('expect HTTP', () => {\r\n            expect(SwaggerDefinitionConstant.Scheme.HTTP).exist;\r\n        });\r\n        it('expect HTTPS', () => {\r\n            expect(SwaggerDefinitionConstant.Scheme.HTTPS).exist;\r\n        });\r\n    });\r\n\r\n    describe('Model', () => {\r\n        describe('Type', () => {\r\n            it('expect OBJECT', () => {\r\n                expect(SwaggerDefinitionConstant.Model.Type.OBJECT).exist;\r\n            });\r\n            it('expect ARRAY', () => {\r\n                expect(SwaggerDefinitionConstant.Model.Type.ARRAY).exist;\r\n            });\r\n        });\r\n        describe('Property', () => {\r\n            describe('Type', () => {\r\n                expectType(SwaggerDefinitionConstant.Model.Property.Type);\r\n            });\r\n            describe('Format', () => {\r\n                it('expect INT_64', () => {\r\n                    expect(\r\n                        SwaggerDefinitionConstant.Model.Property.Format.INT_64\r\n                    ).exist;\r\n                });\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('Parameter', () => {\r\n        describe('Type', () => {\r\n            expectType(SwaggerDefinitionConstant.Parameter.Type);\r\n        });\r\n        describe('In', () => {\r\n            it('expect HEADER', () => {\r\n                expect(SwaggerDefinitionConstant.Parameter.In.HEADER).exist;\r\n            });\r\n            it('expect PATH', () => {\r\n                expect(SwaggerDefinitionConstant.Parameter.In.PATH).exist;\r\n            });\r\n            it('expect QUERY', () => {\r\n                expect(SwaggerDefinitionConstant.Parameter.In.QUERY).exist;\r\n            });\r\n            it('expect BODY', () => {\r\n                expect(SwaggerDefinitionConstant.Parameter.In.BODY).exist;\r\n            });\r\n            it('expect FORM_DATA', () => {\r\n                expect(SwaggerDefinitionConstant.Parameter.In.FORM_DATA).exist;\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('Response', () => {\r\n        describe('Type', () => {\r\n            expectType(SwaggerDefinitionConstant.Response.Type);\r\n        });\r\n    });\r\n\r\n    describe('Security', () => {\r\n        describe('Type', () => {\r\n            it('expect BASIC_AUTHENTICATION', () => {\r\n                expect(\r\n                    SwaggerDefinitionConstant.Security.Type.BASIC_AUTHENTICATION\r\n                ).exist;\r\n            });\r\n            it('expect API_KEY', () => {\r\n                expect(SwaggerDefinitionConstant.Security.Type.API_KEY).exist;\r\n            });\r\n        });\r\n        describe('In', () => {\r\n            it('expect HEADER', () => {\r\n                expect(SwaggerDefinitionConstant.Security.In.HEADER).exist;\r\n            });\r\n            it('expect QUERY', () => {\r\n                expect(SwaggerDefinitionConstant.Security.In.QUERY).exist;\r\n            });\r\n        });\r\n    });\r\n});\r\n\r\nfunction expectType(Type: any) {\r\n    it('expect STRING', () => {\r\n        expect(Type.STRING).exist;\r\n    });\r\n    it('expect NUMBER', () => {\r\n        expect(Type.NUMBER).exist;\r\n    });\r\n    it('expect INTEGER', () => {\r\n        expect(Type.INTEGER).exist;\r\n    });\r\n    it('expect BOOLEAN', () => {\r\n        expect(Type.BOOLEAN).exist;\r\n    });\r\n    it('expect ARRAY', () => {\r\n        expect(Type.ARRAY).exist;\r\n    });\r\n    it('expect OBJECT', () => {\r\n        expect(Type.OBJECT).exist;\r\n    });\r\n}\r\n"]}